<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kiko&#39;s Blog</title>
  
  <subtitle>kikoblog</subtitle>
  <link href="https://www.kikohk.top/atom.xml" rel="self"/>
  
  <link href="https://www.kikohk.top/"/>
  <updated>2021-08-14T07:23:13.085Z</updated>
  <id>https://www.kikohk.top/</id>
  
  <author>
    <name>kiko</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见的排序算法</title>
    <link href="https://www.kikohk.top/article/2eba/"/>
    <id>https://www.kikohk.top/article/2eba/</id>
    <published>2021-07-11T20:46:15.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<p>口诀记忆：</p><blockquote><p>《忆排序 面试我最强》<br>作者：马士兵<br>选炮插，<br>快归堆希统计姬，<br>n 方 n老 n一三，<br>对 n 加 k n 乘 k,<br>不稳稳稳不稳稳，<br>不稳不稳稳稳稳。</p></blockquote><p><img src="https://i.loli.net/2021/07/12/PnI9mAh4zgsWjyH.png" alt="常见算法列表"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;口诀记忆：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;《忆排序 面试我最强》&lt;br&gt;作者：马士兵&lt;br&gt;选炮插，&lt;br&gt;快归堆希统计姬，&lt;br&gt;n 方 n老 n一三，&lt;br&gt;对 n 加 k n 乘 k,&lt;br&gt;不稳稳稳不稳稳，&lt;br&gt;不稳不稳稳稳稳。&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python爬取QQ空间说说，生成词云图</title>
    <link href="https://www.kikohk.top/article/a4b5/"/>
    <id>https://www.kikohk.top/article/a4b5/</id>
    <published>2021-07-07T20:28:38.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<p><em>随着微信逐渐的崛起，渐渐打败了昔日的霸主QQ，日常分享动态的平台也逐渐从QQ空间转移到了朋友圈，现在回去看QQ空间，每天更新的动态不到十个，突然萌生一个想法，将我以前发的那些蠢话全部爬取下来，做成一张回忆录。。。废话不多说，开始本教程。</em></p><p><img src="https://i.loli.net/2021/07/08/MGezng529hjsWYi.png" alt="词云图"></p><p>本教程主要参考知乎大佬：程序猿tx<br><a href="https://zhuanlan.zhihu.com/p/36794847">python爬虫QQ说说并生成词云图，回忆满满</a></p><p>建议先看看大佬的怎么做的。再看看我的教程。</p><p>本教程所需的知识点：python基础、 label seleniumcolor blue模拟登录、 label BeautifulSoup blue 爬取数据、 label wordcloud blue 生成词云图 </p><h2 id="1-安装所需要的包"><a href="#1-安装所需要的包" class="headerlink" title="1.安装所需要的包"></a>1.安装所需要的包</h2><p>使用cmd或者终端，使用pip包管理器进行安装，有时候会报错，大概是pip版本太低，看报错信息进行升级即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install html5lib</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install wordcloud</span><br></pre></td></tr></table></figure><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">beautifulsoup4官方文档</a><br><a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">selenium + python 中文文档</a><br><a href="http://amueller.github.io/word_cloud/">wordcloud官方文档</a></p><h2 id="2-登录QQ空间"><a href="#2-登录QQ空间" class="headerlink" title="2.登录QQ空间"></a>2.登录QQ空间</h2><p>这里使用 label seleniumcolor blue  进行模拟登录，会调用一个浏览器，进行自动化操作。<br><img src="https://i.loli.net/2021/07/08/GsDwe1MPkEaqQmC.png" alt="自动登录"><br>贴上代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line">friend = <span class="string">&#x27;xxxxxxxx&#x27;</span>  <span class="comment"># 朋友的QQ号，这里可以爬取朋友的说说。**前提是朋友的空间要求允许你能访问**，不想就输入你自己的</span></span><br><span class="line"><span class="comment">#user = &#x27;xxxxxxxx&#x27;  # 你的QQ号</span></span><br><span class="line"><span class="comment">#pw = &#x27;xxxxxxxx&#x27;  # 你的QQ密码</span></span><br><span class="line"><span class="comment">###############################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个浏览器对象</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&#x27;https://qzone.qq.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 标签定位</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)  <span class="comment"># 切换浏览器标签定位的作用域</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动登录</span></span><br><span class="line">div = driver.find_element_by_class_name(<span class="string">&#x27;face&#x27;</span>)</span><br><span class="line">div.click()  <span class="comment"># 点击</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让webdriver操纵当前页</span></span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跳到说说的url, friend可以任意改成你想访问的空间，比如这边访问自己的qq空间</span></span><br><span class="line">driver.get(<span class="string">&quot;http://user.qzone.qq.com/&quot;</span> + friend + <span class="string">&quot;/311&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="这里对上面的代码解释一下："><a href="#这里对上面的代码解释一下：" class="headerlink" title="这里对上面的代码解释一下："></a>这里对上面的代码解释一下：</h3><p>实例化一个浏览器对象，这里使用了Chrome浏览器，也可以换成Edge或其他。<br>使用前必须安装对应浏览器的驱动，否则会报错 label chromedriver executable needs to be in PATH red ，这里给上一个Chrome的教程：<a href="https://blog.csdn.net/weixin_44318830/article/details/103339273">安装驱动</a>，</p><p>Edge也差不多<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Edge驱动下载</a>，不过需要自己将名字改成 label MicrosoftWebDriver.exe blue </p><p>在知乎大佬的那篇文章里，使用的是账号密码登录，但我这里使用了自动登录。因为现在安全升级，账号密码登录还需要验证手机号和拖动验证码，难度大幅增加。所以这里使用自动登录，事先将QQ登录好。</p><h2 id="3-爬取空间说说"><a href="#3-爬取空间说说" class="headerlink" title="3.爬取空间说说"></a>3.爬取空间说说</h2><p>这里和知乎大佬的一样</p><p>控制台打开查看说说所在的html标签。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">next_num = <span class="number">0</span>  <span class="comment"># 初始“下一页”的id</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 下拉滚动条，使浏览器加载出全部的内容，</span></span><br><span class="line">    <span class="comment"># 这里是从0开始到5结束 分5 次加载完每页数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">        height = <span class="number">20000</span> * i  <span class="comment"># 每次滑动20000像素</span></span><br><span class="line">        strWord = <span class="string">&quot;window.scrollBy(0,&quot;</span> + <span class="built_in">str</span>(height) + <span class="string">&quot;)&quot;</span></span><br><span class="line">        driver.execute_script(strWord)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里需要选中 说说 所在的frame，否则找不到下面需要的网页元素</span></span><br><span class="line">    driver.switch_to.frame(<span class="string">&quot;app_canvas_frame&quot;</span>)</span><br><span class="line">    <span class="comment"># 解析页面元素</span></span><br><span class="line">    content = BeautifulSoup(driver.page_source, <span class="string">&quot;html5lib&quot;</span>)</span><br><span class="line">    <span class="comment"># 找到&quot;feed_wrap&quot;的div里面的ol标签</span></span><br><span class="line">    ol = content.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;feed_wrap&quot;</span>).ol</span><br><span class="line">    <span class="comment"># 通过find_all遍历li标签数组</span></span><br><span class="line">    lis = ol.find_all(<span class="string">&quot;li&quot;</span>, class_=<span class="string">&quot;feed&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将说说内容写入文件，使用 a 表示内容可以连续不清空写入</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;qq_word.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">            bd = li.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;bd&quot;</span>)</span><br><span class="line">            <span class="comment">#找到具体说说所在标签pre，获取内容</span></span><br><span class="line">            ss_content = bd.pre.get_text()</span><br><span class="line">            f.write(ss_content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当已经到了尾页，“下一页”这个按钮就没有id了，可以结束了</span></span><br><span class="line">    <span class="keyword">if</span> driver.page_source.find(<span class="string">&#x27;pager_next_&#x27;</span> + <span class="built_in">str</span>(next_num)) == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 找到“下一页”的按钮，因为下一页的按钮是动态变化的，这里需要动态记录一下</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;pager_next_&#x27;</span> + <span class="built_in">str</span>(next_num)).click()</span><br><span class="line">    <span class="comment"># “下一页”的id</span></span><br><span class="line">    next_num += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 因为在下一个循环里首先还要把页面下拉，所以要跳到外层的frame上</span></span><br><span class="line">    driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><p>如果你的说说很多，爬取需要等待一段时间，待翻到最后一页</p><p>至此QQ说说已经爬取下来，并且保存在了qq_word.txt文件里</p><p>接下来进行一些精简操作</p><h2 id="4-简化说说"><a href="#4-简化说说" class="headerlink" title="4.简化说说"></a>4.简化说说</h2><p>相比有些经常发说说的人，最终爬取下来的qq_word里有十多万的字数，这么多的说说定是放不下一张词云的，所以为了词云图的美观，这里筛选了字数较少的说说。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(file=<span class="string">&#x27;qq_word.txt&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># print(f.readline())  # 读⼀⾏</span></span><br><span class="line">r = <span class="built_in">open</span>(<span class="string">&#x27;qq_word_simplify.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">if</span> line != <span class="string">&quot;\n&quot;</span>:</span><br><span class="line"><span class="comment"># 将字数少于25的说说保存下来</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(line) &lt;= <span class="number">25</span>:</span><br><span class="line">            <span class="built_in">print</span>(line, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">            line = line.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            r.write(line + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.close()</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>精简后的说说放在了qq_word_simplify.txt这个文件中。</p><h2 id="5-生成词云图"><a href="#5-生成词云图" class="headerlink" title="5.生成词云图"></a>5.生成词云图</h2><p><a href="https://blog.csdn.net/zjw_python/article/details/79003888">wordcloud教程</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成词云</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_word_cloud</span>(<span class="params">filename</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件内容</span></span><br><span class="line">    text = <span class="built_in">open</span>(<span class="string">&quot;&#123;&#125;.txt&quot;</span>.<span class="built_in">format</span>(filename), encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">    <span class="comment"># 设置词云</span></span><br><span class="line">    stopwords = <span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># 此处设置过滤掉的文字</span></span><br><span class="line">    stopwords.update(</span><br><span class="line">        [<span class="string">&#x27;叫&#x27;</span>])</span><br><span class="line">    wc = WordCloud(</span><br><span class="line">        <span class="comment"># 设置背景颜色</span></span><br><span class="line">        background_color=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">        <span class="comment"># 设置最大显示的词云数</span></span><br><span class="line">        max_words=<span class="number">10000</span>,</span><br><span class="line">        <span class="comment"># 字体，楷体。可以自己更换</span></span><br><span class="line">        font_path=<span class="string">&#x27;C:\Windows\Fonts\STKAITI.TTF&#x27;</span>,</span><br><span class="line">        <span class="comment"># 图片宽高边距</span></span><br><span class="line">        height=<span class="number">1440</span>,</span><br><span class="line">        width=<span class="number">2560</span>,</span><br><span class="line"><span class="comment"># 文字之间的间距</span></span><br><span class="line">        margin=<span class="number">1</span>, </span><br><span class="line">        <span class="comment"># 设置字体最大值、最小值</span></span><br><span class="line">        max_font_size=<span class="number">400</span>,</span><br><span class="line">        min_font_size=<span class="number">10</span>,</span><br><span class="line">        <span class="comment"># 设置有多少种随机生成状态，即有多少种配色方案</span></span><br><span class="line">        <span class="comment"># random_state=2,</span></span><br><span class="line"><span class="comment"># 文字的颜色库</span></span><br><span class="line">        colormap=<span class="string">&#x27;Set3&#x27;</span>,</span><br><span class="line">        <span class="comment"># 过滤字</span></span><br><span class="line">        stopwords=stopwords,</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成中...&quot;</span>)</span><br><span class="line">    myword = wc.generate(text)  <span class="comment"># 生成词云</span></span><br><span class="line">    <span class="comment"># 展示词云图</span></span><br><span class="line">    plt.imshow(myword)</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    t = time.strftime(<span class="string">&quot;%H_%M_%S&quot;</span>, time.localtime())</span><br><span class="line">    wc.to_file(<span class="string">&#x27;qq_word_&#x27;</span> + t + <span class="string">&#x27;.png&#x27;</span>)  <span class="comment"># 把词云保存下</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;保存成功！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    create_word_cloud(<span class="string">&#x27;qq_word_simplify&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里主要是调整参数比较烦人，colormap是WordCloud的颜色库，参考<a href="https://www.cnblogs.com/qujianguo/articles/12573566.html">Python中Wordcloud模块colormap的参数及其对应的色条</a></p><p>字体可以自己设置，用电脑上安装的，在C:\Windows\Fonts\下，记得右键属性查看真实的名字<br><img src="https://i.loli.net/2021/07/08/WgHUuFDK4Zy7n8a.png" alt="华文隶书"></p><p>保存的图片名称为qq_word_时间.png</p><p>有的小伙伴可能会说图片的小字太模糊，这里有另一种生成方式，将宽高删除，改用scale=64,数字越高越清晰，但是内容会减少。</p><p>至此，教程结束。有不懂的可以评论留言</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;随着微信逐渐的崛起，渐渐打败了昔日的霸主QQ，日常分享动态的平台也逐渐从QQ空间转移到了朋友圈，现在回去看QQ空间，每天更新的动态不到十个，突然萌生一个想法，将我以前发的那些蠢话全部爬取下来，做成一张回忆录。。。废话不多说，开始本教程。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    
    <category term="爬虫,词云," scheme="https://www.kikohk.top/tags/%E7%88%AC%E8%99%AB-%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>TWRP双清后/scard变乱码的问题解决</title>
    <link href="https://www.kikohk.top/article/d92b/"/>
    <id>https://www.kikohk.top/article/d92b/</id>
    <published>2021-05-29T06:10:08.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TWRP双清后-scard变乱码的问题解决"><a href="#TWRP双清后-scard变乱码的问题解决" class="headerlink" title="TWRP双清后/scard变乱码的问题解决"></a>TWRP双清后/scard变乱码的问题解决</h2><p>进入rec，选择 清除，在右下角 选择 格式化data（此操作会格式化手机内存，如果要备份数据可以先在rec挂载data分区把数据备份到电脑再进行此操作），输入yes  进行格式化data分区，格式完data分区不要重启系统！不要重启系统！不要重启系统！ 返回rec界面，选择重启，重启到recovery，再次进入rec后，选择 高级-工具箱-root设备，root完成之后重启系统就可以了。</p><p>步骤<br>1：首先下载安装USB驱动和ADB驱动，然后USB手机连接电脑。</p><p>2：进入第三方REC，进入的时候要密码就取消。</p><p>3：进入REC主界面后选择 ：挂载 - 选择开启mtp模式。如果开启成功，电脑上会有相应的识别手机的反映。</p><p>4：回到电脑上开始，运行CMD.exe，建议用管理员模式。</p><p>5：输入命令adb remount ，意思是将设备改为可读可写，显示remount succeeded就代表命令执行成功。</p><p>6：下载好 ROOT包 或 刷机包，然后输入adb push C:\1.zip sdcard/，注意对应的路径和文件包名</p><p>下载好的包最好改个简单的名字，放在最简单的路径，比如我就直接把ROOT包改成了1.zip，放在的C盘根目录。</p><p>7：传输完成后，返回REC首屏，选择安装在 sdcard 文件夹，就可以看到你传过去的东西了，直接安装就OK。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TWRP双清后-scard变乱码的问题解决&quot;&gt;&lt;a href=&quot;#TWRP双清后-scard变乱码的问题解决&quot; class=&quot;headerlink&quot; title=&quot;TWRP双清后/scard变乱码的问题解决&quot;&gt;&lt;/a&gt;TWRP双清后/scard变乱码的问题解决&lt;/</summary>
      
    
    
    
    <category term="java" scheme="https://www.kikohk.top/categories/java/"/>
    
    
    <category term="刷机" scheme="https://www.kikohk.top/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>windows右键设置新建markdown格式文件</title>
    <link href="https://www.kikohk.top/article/cef0/"/>
    <id>https://www.kikohk.top/article/cef0/</id>
    <published>2021-04-23T10:54:46.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows右键设置新建markdown格式文件"><a href="#windows右键设置新建markdown格式文件" class="headerlink" title="windows右键设置新建markdown格式文件"></a>windows右键设置新建markdown格式文件</h1><h2 id="1-win-R"><a href="#1-win-R" class="headerlink" title="1.win+R"></a>1.win+R</h2><p>输入 <strong>regedit</strong><br>进入注册表编辑器</p><p>在上方地址栏输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_CLASSES_ROOT\.md</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/23/sR8XZtDuUhyfCv7.png"></p><h2 id="2-新建项"><a href="#2-新建项" class="headerlink" title="2. 新建项"></a>2. 新建项</h2><p>新建一个叫<strong>ShellNew</strong>的项</p><p><img src="https://i.loli.net/2021/04/23/KpNIh68JGq34ROD.png"></p><h2 id="3-新建字符串值"><a href="#3-新建字符串值" class="headerlink" title="3.新建字符串值"></a>3.新建字符串值</h2><p>进入<strong>ShellNew</strong>，新建一个字符串值<strong>NullFile</strong></p><h2 id="4-设置值"><a href="#4-设置值" class="headerlink" title="4.设置值"></a>4.设置值</h2><p>右键点击<strong>NullFile</strong>，修改值为<strong>typora.md</strong></p><p><img src="https://i.loli.net/2021/04/23/yLvXdzlrgJk2DTH.png"></p><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;windows右键设置新建markdown格式文件&quot;&gt;&lt;a href=&quot;#windows右键设置新建markdown格式文件&quot; class=&quot;headerlink&quot; title=&quot;windows右键设置新建markdown格式文件&quot;&gt;&lt;/a&gt;windows右键设置</summary>
      
    
    
    
    
    <category term="MARKDOWN" scheme="https://www.kikohk.top/tags/MARKDOWN/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="https://www.kikohk.top/article/e0b8/"/>
    <id>https://www.kikohk.top/article/e0b8/</id>
    <published>2021-04-22T20:28:38.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="axios-的-then方法不能使用this的解决方法"><a href="#axios-的-then方法不能使用this的解决方法" class="headerlink" title="axios 的 then方法不能使用this的解决方法"></a>axios 的 then方法不能使用this的解决方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.userCount)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把function(res) 改成箭头函数(res) =&gt;。就可以取到this了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.axios(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.userCount)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;axios-的-then方法不能使用this的解决方法&quot;&gt;&lt;a href=&quot;#axios-的-then方法不能使用this的解决方法&quot; class=&quot;headerlink&quot; title=&quot;axios 的 then方法不能使用this的解决方法&quot;&gt;&lt;/a&gt;axios</summary>
      
    
    
    
    <category term="vue" scheme="https://www.kikohk.top/categories/vue/"/>
    
    
    <category term="vue" scheme="https://www.kikohk.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用Python参加程序设计竞赛</title>
    <link href="https://www.kikohk.top/article/8096/"/>
    <id>https://www.kikohk.top/article/8096/</id>
    <published>2021-04-16T08:41:07.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<p>==4月17日，参加浙江大学生程序竞赛（ACM），为此整理一份python笔记。 #F44336==</p><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><h4 id="输入多个字符串"><a href="#输入多个字符串" class="headerlink" title="输入多个字符串"></a>输入多个字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1, str2 = <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="输入整数序列"><a href="#输入整数序列" class="headerlink" title="输入整数序列"></a>输入整数序列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">intlist = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)))</span><br></pre></td></tr></table></figure><h4 id="多组输入"><a href="#多组输入" class="headerlink" title="多组输入"></a>多组输入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="多样例输入一组整数，要求输出整数的平方，每个结果占一行"><a href="#多样例输入一组整数，要求输出整数的平方，每个结果占一行" class="headerlink" title="多样例输入一组整数，要求输出整数的平方，每个结果占一行"></a>多样例输入一组整数，要求输出整数的平方，每个结果占一行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">int</span>(line)**<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="标准输出"><a href="#标准输出" class="headerlink" title="标准输出"></a>标准输出</h3><h4 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name:%s&quot;</span>%(<span class="string">&#x27;Jack&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="输出整数"><a href="#输出整数" class="headerlink" title="输出整数"></a>输出整数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Age:%d&quot;</span>%(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h4 id="输出浮点数"><a href="#输出浮点数" class="headerlink" title="输出浮点数"></a>输出浮点数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Height:%f&quot;</span>%(<span class="number">160.5</span>))</span><br></pre></td></tr></table></figure><h4 id="输出控制位数（四舍五入）"><a href="#输出控制位数（四舍五入）" class="headerlink" title="输出控制位数（四舍五入）"></a>输出控制位数（四舍五入）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Heihgt:%.2f&quot;</span>%(<span class="number">160.5</span>))</span><br></pre></td></tr></table></figure><h4 id="输出左端对齐"><a href="#输出左端对齐" class="headerlink" title="输出左端对齐"></a>输出左端对齐</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Name:%-8s&quot;</span>%(<span class="string">&#x27;Jack&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="各个进制"><a href="#各个进制" class="headerlink" title="各个进制"></a>各个进制</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;十进制：%d，八进制：%o，十六进制%x，二进制%b&quot;</span>%(<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h4 id="输出指数"><a href="#输出指数" class="headerlink" title="输出指数"></a>输出指数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%e&quot;</span>%<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="使用0作为占位符"><a href="#使用0作为占位符" class="headerlink" title="使用0作为占位符"></a>使用0作为占位符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Age:%08d&quot;</span>%(<span class="number">12</span>))</span><br></pre></td></tr></table></figure><h4 id="Print函数不换行"><a href="#Print函数不换行" class="headerlink" title="Print函数不换行"></a>Print函数不换行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fuck&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="要求输出列表listt中的每一个数字，每个数字间有一个空格，但末尾不能有空格"><a href="#要求输出列表listt中的每一个数字，每个数字间有一个空格，但末尾不能有空格" class="headerlink" title="要求输出列表listt中的每一个数字，每个数字间有一个空格，但末尾不能有空格"></a>要求输出列表listt中的每一个数字，每个数字间有一个空格，但末尾不能有空格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strr = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 创建一个空字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listt:</span><br><span class="line">    strr += <span class="built_in">str</span>(i)+<span class="string">&#x27; &#x27;</span>  <span class="comment"># 数字后面加了一个空格</span></span><br><span class="line"><span class="built_in">print</span> strr[:-<span class="number">1</span>]  <span class="comment"># 使用切片，去掉了最后一个空格</span></span><br></pre></td></tr></table></figure><h3 id="相对于C-C-更加Pythonic的小技巧"><a href="#相对于C-C-更加Pythonic的小技巧" class="headerlink" title="相对于C/C++更加Pythonic的小技巧"></a>相对于C/C++更加Pythonic的小技巧</h3><h4 id="链式比较"><a href="#链式比较" class="headerlink" title="链式比较"></a>链式比较</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &lt;= b &lt;= a &lt; <span class="number">10</span>  <span class="comment">#True</span></span><br></pre></td></tr></table></figure><h4 id="真值判断"><a href="#真值判断" class="headerlink" title="真值判断"></a>真值判断</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&#x27;Tim&#x27;</span></span><br><span class="line">langs = [<span class="string">&#x27;AS3&#x27;</span>, <span class="string">&#x27;Lua&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tim&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;Male&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> name <span class="keyword">and</span> langs <span class="keyword">and</span> info:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All True!&#x27;</span>)  <span class="comment">#All True!</span></span><br></pre></td></tr></table></figure><h4 id="字符串反转"><a href="#字符串反转" class="headerlink" title="字符串反转"></a>字符串反转</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_str</span>(<span class="params"> s </span>):</span></span><br><span class="line">    <span class="keyword">return</span> s[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="列表连接"><a href="#列表连接" class="headerlink" title="列表连接"></a>列表连接</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">strList = [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;good&quot;</span>]  </span><br><span class="line">res =  <span class="string">&#x27; &#x27;</span>.join(strList)</span><br></pre></td></tr></table></figure><h4 id="列表求乘积"><a href="#列表求乘积" class="headerlink" title="列表求乘积"></a>列表求乘积</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line">prod = reduce(mul, numList, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="一键列表"><a href="#一键列表" class="headerlink" title="一键列表"></a>一键列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l = [x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="字典判断并添加新内容"><a href="#字典判断并添加新内容" class="headerlink" title="字典判断并添加新内容"></a>字典判断并添加新内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Tim&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">23</span>&#125;</span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;workage&#x27;</span>] = dic.get(<span class="string">&#x27;workage&#x27;</span>,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"><span class="comment">#dic = &#123;&#x27;age&#x27;: 23, &#x27;workage&#x27;: 1, &#x27;name&#x27;: &#x27;Tim&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="for…else检查是否退出"><a href="#for…else检查是否退出" class="headerlink" title="for…else检查是否退出"></a>for…else检查是否退出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;find 5&#x27;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;can not find 5!&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="同时得到索引和值"><a href="#同时得到索引和值" class="headerlink" title="同时得到索引和值"></a>同时得到索引和值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, e <span class="keyword">in</span> <span class="built_in">enumerate</span>(array,<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">print</span> i, e</span><br></pre></td></tr></table></figure><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.upper()<span class="comment">#全部转大写</span></span><br><span class="line">a.lower()<span class="comment">#全部转小写</span></span><br></pre></td></tr></table></figure><h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><h4 id="当你真的害怕copy到引用时"><a href="#当你真的害怕copy到引用时" class="headerlink" title="当你真的害怕copy到引用时"></a>当你真的害怕copy到引用时</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">b = copy.deepcopy(a)</span><br></pre></td></tr></table></figure><hr><h2 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h2><h3 id="列表初始化"><a href="#列表初始化" class="headerlink" title="列表初始化"></a>列表初始化</h3><h4 id="带有重复元素的初始化"><a href="#带有重复元素的初始化" class="headerlink" title="带有重复元素的初始化"></a>带有重复元素的初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listt = [<span class="number">0</span>]*<span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="递增初始化"><a href="#递增初始化" class="headerlink" title="递增初始化"></a>递增初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listt = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="comment">#注意 网传的listt=range(10)在python3是错误的写法</span></span><br></pre></td></tr></table></figure><h4 id="初始化一个二维数组"><a href="#初始化一个二维数组" class="headerlink" title="初始化一个二维数组"></a>初始化一个二维数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">multilist = [[<span class="number">0</span>] * <span class="number">5</span> <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="comment">#注意 [[0]*5]*3是不对的 自己想为什么</span></span><br></pre></td></tr></table></figure><h3 id="列表拼接"><a href="#列表拼接" class="headerlink" title="列表拼接"></a>列表拼接</h3><h4 id="拼接运算符"><a href="#拼接运算符" class="headerlink" title="拼接运算符"></a>拼接运算符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#+</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">#extend</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].extend([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><h4 id="带步长的切片"><a href="#带步长的切片" class="headerlink" title="带步长的切片"></a>带步长的切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num2[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment">#第三个数字代表步长</span></span><br></pre></td></tr></table></figure><h4 id="反转切片"><a href="#反转切片" class="headerlink" title="反转切片"></a>反转切片</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num2[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#删除index为0的元素</span></span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.remove(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">#删除元素为&#x27;a&#x27;的元素，若有重复删除最前面的一个</span></span><br></pre></td></tr></table></figure><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.pop(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#删除index为0元素且返回元素值</span></span><br></pre></td></tr></table></figure><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><h4 id="升序排序"><a href="#升序排序" class="headerlink" title="升序排序"></a>升序排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h4 id="任意顺序排序"><a href="#任意顺序排序" class="headerlink" title="任意顺序排序"></a>任意顺序排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(a, reverse=<span class="literal">True</span>)<span class="comment">#降序</span></span><br><span class="line"><span class="built_in">sorted</span>(a, reverse=<span class="literal">False</span>)<span class="comment">#升序</span></span><br></pre></td></tr></table></figure><h4 id="按某个键值排序"><a href="#按某个键值排序" class="headerlink" title="按某个键值排序"></a>按某个键值排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(student_objects, key=attrgetter(<span class="string">&#x27;age&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="按长度排序"><a href="#按长度排序" class="headerlink" title="按长度排序"></a>按长度排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;love&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">sorted</span>(a, key=<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><h4 id="按首字母排序"><a href="#按首字母排序" class="headerlink" title="按首字母排序"></a>按首字母排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(a, key= <span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="二分查找到合适的位置"><a href="#二分查找到合适的位置" class="headerlink" title="二分查找到合适的位置"></a>二分查找到合适的位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line">c=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">c.sort()</span><br><span class="line">bisect.bisect(c, <span class="number">2</span>)<span class="comment">#返回2合适的插入位置</span></span><br></pre></td></tr></table></figure><h3 id="列表常用内置函数"><a href="#列表常用内置函数" class="headerlink" title="列表常用内置函数"></a>列表常用内置函数</h3><h4 id="添加在最后"><a href="#添加在最后" class="headerlink" title="添加在最后"></a>添加在最后</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.append(obj)</span><br></pre></td></tr></table></figure><h4 id="统计某个元素在列表中出现次数"><a href="#统计某个元素在列表中出现次数" class="headerlink" title="统计某个元素在列表中出现次数"></a>统计某个元素在列表中出现次数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.count(obj)</span><br></pre></td></tr></table></figure><h4 id="找出第一个匹配元素的索引"><a href="#找出第一个匹配元素的索引" class="headerlink" title="找出第一个匹配元素的索引"></a>找出第一个匹配元素的索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.index(obj)</span><br></pre></td></tr></table></figure><h2 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h2><h3 id="字典初始化"><a href="#字典初始化" class="headerlink" title="字典初始化"></a>字典初始化</h3><h4 id="普通初始化"><a href="#普通初始化" class="headerlink" title="普通初始化"></a>普通初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Alice&#x27;</span>: <span class="string">&#x27;2341&#x27;</span>, <span class="string">&#x27;Beth&#x27;</span>: <span class="string">&#x27;9102&#x27;</span>, <span class="string">&#x27;Cecil&#x27;</span>: <span class="string">&#x27;3258&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#经典案例</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;yellow&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;blue&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    d[k].append(v)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">[(<span class="string">&#x27;blue&#x27;</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">&#x27;red&#x27;</span>, [<span class="number">1</span>]), (<span class="string">&#x27;yellow&#x27;</span>, [<span class="number">1</span>, <span class="number">3</span>])]</span><br></pre></td></tr></table></figure><h4 id="默认字典统计词频"><a href="#默认字典统计词频" class="headerlink" title="默认字典统计词频"></a>默认字典统计词频</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;mississippi&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line"><span class="meta">... </span>    d[k] += <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</span><br><span class="line">[(<span class="string">&#x27;i&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;p&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;s&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;m&#x27;</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h3 id="字典常用函数"><a href="#字典常用函数" class="headerlink" title="字典常用函数"></a>字典常用函数</h3><h4 id="返回（key-value）元组列表"><a href="#返回（key-value）元组列表" class="headerlink" title="返回（key:value）元组列表"></a>返回（key:value）元组列表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radiansdict.items()</span><br></pre></td></tr></table></figure><h4 id="返回所有键"><a href="#返回所有键" class="headerlink" title="返回所有键"></a>返回所有键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radiansdict.keys()</span><br></pre></td></tr></table></figure><h4 id="返回所有值"><a href="#返回所有值" class="headerlink" title="返回所有值"></a>返回所有值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">radiansdict.value()</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d.pop(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="字典小技巧"><a href="#字典小技巧" class="headerlink" title="字典小技巧"></a>字典小技巧</h2><h4 id="通过value查找key"><a href="#通过value查找key" class="headerlink" title="通过value查找key"></a>通过value查找key</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> (student.keys()) [<span class="built_in">list</span> (student.values()).index (<span class="string">&#x27;1004&#x27;</span>)]</span><br><span class="line"><span class="comment">#返回的是一个list</span></span><br></pre></td></tr></table></figure><h4 id="高效率合并两个dict"><a href="#高效率合并两个dict" class="headerlink" title="高效率合并两个dict"></a>高效率合并两个dict</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(dict1, **dict2)</span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = &#123;number: number * <span class="number">2</span> <span class="keyword">for</span> number <span class="keyword">in</span> numbers&#125;</span><br></pre></td></tr></table></figure><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><h4 id="交"><a href="#交" class="headerlink" title="交"></a>交</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a &amp; b</span><br></pre></td></tr></table></figure><h4 id="并"><a href="#并" class="headerlink" title="并"></a>并</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a | b</span><br></pre></td></tr></table></figure><h4 id="补"><a href="#补" class="headerlink" title="补"></a>补</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a - b</span><br></pre></td></tr></table></figure><h4 id="不同时在a和b中的"><a href="#不同时在a和b中的" class="headerlink" title="不同时在a和b中的"></a>不同时在a和b中的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a ^ b</span><br></pre></td></tr></table></figure><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><h4 id="pai"><a href="#pai" class="headerlink" title="pai"></a>pai</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pai = math.pi</span><br></pre></td></tr></table></figure><h4 id="自然指数"><a href="#自然指数" class="headerlink" title="自然指数"></a>自然指数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = math.e</span><br></pre></td></tr></table></figure><h4 id="向上向下取整"><a href="#向上向下取整" class="headerlink" title="向上向下取整"></a>向上向下取整</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.ceil(x)<span class="comment">#向上</span></span><br><span class="line">math.floor(x)<span class="comment">#向下</span></span><br></pre></td></tr></table></figure><h4 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.fabs(x)</span><br></pre></td></tr></table></figure><h4 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.<span class="built_in">pow</span>(x,y)</span><br></pre></td></tr></table></figure><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.log(x,a)</span><br></pre></td></tr></table></figure><h4 id="sin-cos-tan"><a href="#sin-cos-tan" class="headerlink" title="sin cos tan"></a>sin cos tan</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.sin(x)  </span><br><span class="line">math.cos(x)</span><br><span class="line">math.tan(x)</span><br></pre></td></tr></table></figure><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><h4 id="生成日期"><a href="#生成日期" class="headerlink" title="生成日期"></a>生成日期</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="日期字符输出"><a href="#日期字符输出" class="headerlink" title="日期字符输出"></a>日期字符输出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.strftime(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="生成时间"><a href="#生成时间" class="headerlink" title="生成时间"></a>生成时间</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = datetime.time(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span><br></pre></td></tr></table></figure><h4 id="时间字符输出"><a href="#时间字符输出" class="headerlink" title="时间字符输出"></a>时间字符输出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.strftime(<span class="string">&#x27;%H:%M:%S&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="获取时间-日期差"><a href="#获取时间-日期差" class="headerlink" title="获取时间/日期差"></a>获取时间/日期差</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(end_time - start_time).seconds</span><br><span class="line">(end_time - start_time).days</span><br></pre></td></tr></table></figure><h4 id="加上时间"><a href="#加上时间" class="headerlink" title="加上时间"></a>加上时间</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d2 = d1 + datetime.timedelta(hours = <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="输入输出重定向到文件"><a href="#输入输出重定向到文件" class="headerlink" title="输入输出重定向到文件"></a>输入输出重定向到文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;in.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> in_file, <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> out_file:</span><br><span class="line">sys.stdin = in_file</span><br><span class="line">sys.stdout = out_file</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h4 id="增大递归调用的层数"><a href="#增大递归调用的层数" class="headerlink" title="增大递归调用的层数"></a>增大递归调用的层数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.setrecursionlimit(<span class="built_in">int</span>(<span class="number">1e5</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;==4月17日，参加浙江大学生程序竞赛（ACM），为此整理一份python笔记。 #F44336==&lt;/p&gt;
&lt;h2 id=&quot;标准输入输出&quot;&gt;&lt;a href=&quot;#标准输入输出&quot; class=&quot;headerlink&quot; title=&quot;标准输入输出&quot;&gt;&lt;/a&gt;标准输入输出&lt;/h2</summary>
      
    
    
    
    
    <category term="ACM,Python" scheme="https://www.kikohk.top/tags/ACM-Python/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU(esp8266)制作温湿度传感器</title>
    <link href="https://www.kikohk.top/article/fc8a/"/>
    <id>https://www.kikohk.top/article/fc8a/</id>
    <published>2021-02-15T08:48:17.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="我是一个写代码的程序员，这几个月接触了一下物联网，这几天做了一个esp8266配合土壤湿度传感器的玩意，写个帖子来记录一番。"><a href="#我是一个写代码的程序员，这几个月接触了一下物联网，这几天做了一个esp8266配合土壤湿度传感器的玩意，写个帖子来记录一番。" class="headerlink" title="我是一个写代码的程序员，这几个月接触了一下物联网，这几天做了一个esp8266配合土壤湿度传感器的玩意，写个帖子来记录一番。"></a>我是一个写代码的程序员，这几个月接触了一下物联网，这几天做了一个esp8266配合土壤湿度传感器的玩意，写个帖子来记录一番。</h3><p><img src="https://i.loli.net/2021/02/12/GJDzXUsRIeCvFBw.jpg" alt="成品"></p><h4 id="硬件清单："><a href="#硬件清单：" class="headerlink" title="硬件清单："></a>硬件清单：</h4><ul><li><p>NodeMCU （esp8266 wifi 模块）</p></li><li><p>土壤湿度传感器</p></li><li><p>DHT11 温湿度传感器</p></li><li><p>OLED液晶屏</p><p><img src="https://i.loli.net/2021/02/12/ZWzpse8xhOcu4oU.jpg" alt="NodeMCU"><br><img src="https://i.loli.net/2021/02/12/DxKNgjuI8ACtvFy.jpg" alt="土壤湿度传感器"><br><img src="https://i.loli.net/2021/02/12/9cqmKVYzQrweAkC.jpg" alt="DHT11 温湿度传感器"><br><img src="https://i.loli.net/2021/02/12/CbymsMxWqP2uLQp.jpg" alt="OLED液晶屏"></p><p>这些在某宝都可以买到，总的下来也就30块左右吧。剩下的杜邦线，面包板这些就不说了，玩这个都需要的。<br>这里说一下NodeMCU就是基于esp8266进行的二次封装，集成了硬件、软件，也就是不需要自己刷固件了。推荐小白进行开发    <a href="https://zhuanlan.zhihu.com/p/268419382">ESP8266与NodeMCU的区别和开发方式</a></p></li></ul><h4 id="软件清单"><a href="#软件清单" class="headerlink" title="软件清单:"></a>软件清单:</h4><ul><li>arduino IDE</li></ul><p><a href="https://www.arduino.cn/thread-76029-1-1.html">Arduino IDE安装esp8266 SDK</a> </p><h2 id="正式流程"><a href="#正式流程" class="headerlink" title="正式流程"></a>正式流程</h2><h3 id="nodeMcu-连接显示屏"><a href="#nodeMcu-连接显示屏" class="headerlink" title="nodeMcu 连接显示屏"></a>nodeMcu 连接显示屏</h3><p>这里直接把最难的一步放到最前面。因为我将我这块屏连上nodeMcu就花了好几天。</p><p>我这块屏是1.8寸的OLED液晶屏，采用ST7735S驱动。</p><p>一开始我用淘宝卖家提供的库进行连接，十分不好用，文档都是英文的，网上百度也没有教程。于是我找到了网上用的最多的一个TFT库：TFT_eSPI，这个库兼容许多驱动，下面就用这个库进行操作。GitHub：<a href="https://github.com/Bodmer/TFT_eSPI/">TFT_eSPI</a></p><h4 id="下载TFT-eSPI库"><a href="#下载TFT-eSPI库" class="headerlink" title="下载TFT_eSPI库"></a>下载TFT_eSPI库</h4><p>首先去GitHub上下载TFT_eSPI，放到Arduino IDE的libraries文件夹下，一般在文档\Arduino\libraries </p><h4 id="编辑用户需要的驱动"><a href="#编辑用户需要的驱动" class="headerlink" title="编辑用户需要的驱动"></a>编辑用户需要的驱动</h4><p>这一步非常重要，来到TFT_eSPI文件加下找到User_Setup.h这个文件，打开编辑。</p><p><img src="https://i.loli.net/2021/02/12/XOT8xzwokqepLSF.png" alt="选择自己显示屏的驱动"></p><p>找到你的显示屏驱动，然后取消注释。我这里用的ST7735S，但是只有ST7735，就将就着用了，目前没发现问题。</p><p><img src="https://i.loli.net/2021/02/12/siedk8AZV9GHPxK.png" alt="屏幕分辨率"></p><p>找到屏幕所适合的分辨率，WIDTH宽，HIGHT高。取消注释</p><p><img src="https://i.loli.net/2021/02/12/TkOJpyPINlvLtQj.png" alt="接线"></p><p>接线这一步也是非常的重要，困扰了我好几天。因为我的显示屏引脚和网上的不太一样，实验了很久。</p><p>按照上面的内容，将NodeMCU和显示屏进行连接。</p><p>这边说一下，有的小伙伴买到的显示屏或许没有SDI/MOSI，其实对应的就是SDA，名字不一样而已。还有SDO/MISO对应SCL，RESET也就是RST。有的还有一个BL，可以不用连。</p><p>接下来进TFT_eSPI\examples文件夹，根据分辨率在前三个文件夹进行选择，找到里面的TFT_Rainbow测试案例，进行刷入，测试显示屏是否连接成功。</p><p>注：当显示屏和nodemcu连接上并通电时，应该是白色的，说明正负极接对了。</p><p>测试程序显示完全后，搁置一旁，进行下面的操作。</p><h3 id="连接DHT11温湿度传感器"><a href="#连接DHT11温湿度传感器" class="headerlink" title="连接DHT11温湿度传感器"></a>连接DHT11温湿度传感器</h3><h4 id="加载DHT驱动库"><a href="#加载DHT驱动库" class="headerlink" title="加载DHT驱动库"></a>加载DHT驱动库</h4><ul><li><p>在arduino中的工具-管理库中搜索DHT</p></li><li><p>找到DHT sensor library，选择安装即可。</p></li></ul><p>在传感器上，有三个脚，分别是+、out、-，分别是正极、输入、负极，正负极随便连接nodemcu上的GND和3V3即可，out我这边连接的是D2。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>所需的代码（这里只是介绍代码功能，完整代码见末尾）：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;DHT.h&quot;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DHTPIN 8 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DHTTYPE DHT11</span></span><br><span class="line"><span class="function">DHT <span class="title">dht</span><span class="params">(DHTPIN, DHTTYPE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  dht.begin(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  delay(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">float</span> h = dht.readHumidity(); <span class="comment">// 获取湿度</span></span><br><span class="line">  <span class="keyword">float</span> t = dht.readTemperature(); <span class="comment">// 获取温度</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Humidity: &quot;</span>);</span><br><span class="line">  Serial.println(h);</span><br><span class="line">  Serial.print(<span class="string">&quot;Temperature: &quot;</span>);</span><br><span class="line">  Serial.print(t);</span><br><span class="line">  Serial.println(<span class="string">&quot; ℃ &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开串口监视器</p><p><img src="https://i.loli.net/2021/02/15/htOqmLMivPYfy1R.jpg" alt="串口输出"></p><h3 id="连接土壤湿度传感器"><a href="#连接土壤湿度传感器" class="headerlink" title="连接土壤湿度传感器"></a>连接土壤湿度传感器</h3><p>土壤湿度传感器有两种，黑色的是四线制的（4个引脚），有数字信号和模拟信号两种输出；红色款是三线制，只有模拟信号。我用的是四线制的。</p><p><img src="https://i.loli.net/2021/02/15/iRfot5j6N3Hz2hP.jpg" alt="中间小的叫比较器"></p><p>先将土壤湿度传感器和比较器相连，正负相连。如上图。</p><p>然后比较器的GND和VCC分别连接nodemcu的GND和vcc(3v3)，AO连nodemcu上的A0，DO因为用不到，所以不连。</p><p>下面的是测试程序：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AO  A0  <span class="comment">// 数字信号 连 A0 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO  16    <span class="comment">// 模拟信号 连 D0</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(AO, INPUT);</span><br><span class="line">  pinMode(DO, INPUT);</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;AO=&quot;</span>);</span><br><span class="line">  Serial.print(analogRead(A0)); <span class="comment">// 获取数字信号</span></span><br><span class="line">  Serial.print(<span class="string">&quot;|DO=&quot;</span>);</span><br><span class="line">  Serial.println(digitalRead(DO)); <span class="comment">// 获取模拟信号</span></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将信息显示在屏幕上"><a href="#将信息显示在屏幕上" class="headerlink" title="将信息显示在屏幕上"></a>将信息显示在屏幕上</h3><p>如果你的DHT传感器和土壤湿度传感器的测试程序都通过的话，就可以进行下面的操作了。</p><p>这里介绍几个屏幕操作代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化彩屏</span></span><br><span class="line">tft.init();</span><br><span class="line"><span class="comment">//设置屏幕颜色为黑色</span></span><br><span class="line">tft.fillScreen(TFT_BLACK);</span><br><span class="line"><span class="comment">// 设置屏幕旋转 180 度</span></span><br><span class="line">tft.setRotation(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 设置 4 号字体</span></span><br><span class="line">tft.setTextFont(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//设置文本颜色为绿色</span></span><br><span class="line">tft.setTextColor(TFT_GREEN); </span><br><span class="line"><span class="comment">//设置文字起始位置(从左上角开始为0,0)</span></span><br><span class="line">tft.setCursor(x, y);</span><br><span class="line"><span class="comment">//在屏幕上打印文本</span></span><br><span class="line">tft.print(<span class="string">&quot;输出文本&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="文字取模"><a href="#文字取模" class="headerlink" title="文字取模"></a>文字取模</h4><p>因为屏幕不支持汉字，所以要想显示汉字，必须像画图一下在屏幕上一笔一笔的显示出啦。所以需要对汉字进行取模。</p><p>这里用到的取模工具：<a href="http://www.pc6.com/softview/SoftView_101312.html">字模提取V2.2</a></p><h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><ol><li><p>在文字输入区输入汉字</p></li><li><p>输入完成后按ctrl+enter</p></li><li><p>左边点击取模方式</p></li><li><p>选择C51格式</p></li><li><p>在点阵生成区显示对应的十六进制数</p></li><li><p>每个汉字对应两行十六进制，复制保存。</p><p><img src="https://i.loli.net/2021/02/15/LlTP9ZKAgB4zOCs.png"></p><p>//这边解释一下这行代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在屏幕上打印一个汉字。</span></span><br><span class="line">tft.drawBitmap(x, y, 汉字变量名, 汉字的长, 汉字的宽, 汉字的颜色);</span><br></pre></td></tr></table></figure></li></ol><p>准备好后，附上我完整的代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;DHT.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;TFT_eSPI.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">TFT_eSPI tft = TFT_eSPI();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AO  A0 <span class="comment">//定义A0为土壤湿度传感器AO脚</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DO  16  <span class="comment">// DO没有用到，可以不写      </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DHTPIN 4 <span class="comment">//D2 对应DHT的out脚</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DHTTYPE DHT11</span></span><br><span class="line"><span class="function">DHT <span class="title">dht</span><span class="params">(DHTPIN, DHTTYPE)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的是汉字取模的定义变量，一个汉字一个变量。</span></span><br><span class="line"><span class="comment">//土</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_1[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//壤</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_2[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x27</span>,<span class="number">0xFC</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xB8</span>,<span class="number">0xF2</span>,<span class="number">0xA8</span>,<span class="number">0x23</span>,<span class="number">0xB8</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0x27</span>,<span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0x27</span>,<span class="number">0xFC</span>,<span class="number">0x31</span>,<span class="number">0x10</span>,<span class="number">0xEF</span>,<span class="number">0xFE</span>,<span class="number">0x41</span>,<span class="number">0x28</span>,<span class="number">0x03</span>,<span class="number">0x10</span>,<span class="number">0x0D</span>,<span class="number">0x48</span>,<span class="number">0x01</span>,<span class="number">0x86</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//湿</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_3[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0xF8</span>,<span class="number">0x14</span>,<span class="number">0x08</span>,<span class="number">0x14</span>,<span class="number">0x08</span>,<span class="number">0x87</span>,<span class="number">0xF8</span>,<span class="number">0x44</span>,<span class="number">0x08</span>,<span class="number">0x44</span>,<span class="number">0x08</span>,<span class="number">0x17</span>,<span class="number">0xF8</span>,</span><br><span class="line"><span class="number">0x11</span>,<span class="number">0x20</span>,<span class="number">0x21</span>,<span class="number">0x20</span>,<span class="number">0xE9</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x28</span>,<span class="number">0x23</span>,<span class="number">0x30</span>,<span class="number">0x21</span>,<span class="number">0x20</span>,<span class="number">0x2F</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//度</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_4[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x3F</span>,<span class="number">0xFE</span>,<span class="number">0x22</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x20</span>,<span class="number">0x3F</span>,<span class="number">0xFC</span>,<span class="number">0x22</span>,<span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x23</span>,<span class="number">0xE0</span>,<span class="number">0x20</span>,<span class="number">0x00</span>,<span class="number">0x2F</span>,<span class="number">0xF0</span>,<span class="number">0x24</span>,<span class="number">0x10</span>,<span class="number">0x42</span>,<span class="number">0x20</span>,<span class="number">0x41</span>,<span class="number">0xC0</span>,<span class="number">0x86</span>,<span class="number">0x30</span>,<span class="number">0x38</span>,<span class="number">0x0E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//室</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_5[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xFE</span>,<span class="number">0x40</span>,<span class="number">0x02</span>,<span class="number">0x80</span>,<span class="number">0x04</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x04</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x20</span>,</span><br><span class="line"><span class="number">0x1F</span>,<span class="number">0xF0</span>,<span class="number">0x01</span>,<span class="number">0x10</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x3F</span>,<span class="number">0xF8</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0xFF</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//内</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_6[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x7F</span>,<span class="number">0xFC</span>,<span class="number">0x41</span>,<span class="number">0x04</span>,<span class="number">0x41</span>,<span class="number">0x04</span>,<span class="number">0x41</span>,<span class="number">0x04</span>,<span class="number">0x42</span>,<span class="number">0x84</span>,</span><br><span class="line"><span class="number">0x42</span>,<span class="number">0x44</span>,<span class="number">0x44</span>,<span class="number">0x24</span>,<span class="number">0x48</span>,<span class="number">0x14</span>,<span class="number">0x50</span>,<span class="number">0x14</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x04</span>,<span class="number">0x40</span>,<span class="number">0x14</span>,<span class="number">0x40</span>,<span class="number">0x08</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//温</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_7[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x23</span>,<span class="number">0xF8</span>,<span class="number">0x12</span>,<span class="number">0x08</span>,<span class="number">0x12</span>,<span class="number">0x08</span>,<span class="number">0x83</span>,<span class="number">0xF8</span>,<span class="number">0x42</span>,<span class="number">0x08</span>,<span class="number">0x42</span>,<span class="number">0x08</span>,<span class="number">0x13</span>,<span class="number">0xF8</span>,</span><br><span class="line"><span class="number">0x10</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0xFC</span>,<span class="number">0xE4</span>,<span class="number">0xA4</span>,<span class="number">0x24</span>,<span class="number">0xA4</span>,<span class="number">0x24</span>,<span class="number">0xA4</span>,<span class="number">0x24</span>,<span class="number">0xA4</span>,<span class="number">0x2F</span>,<span class="number">0xFE</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//：</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_8[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x30</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//℃</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> PROGMEM str_9[] =</span><br><span class="line">&#123; </span><br><span class="line"><span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0x91</span>,<span class="number">0xF4</span>,<span class="number">0x96</span>,<span class="number">0x0C</span>,<span class="number">0x6C</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x00</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x0C</span>,<span class="number">0x04</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,<span class="number">0xF0</span>,<span class="number">0x00</span>,<span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  dht.begin();</span><br><span class="line">  pinMode(AO, INPUT);</span><br><span class="line">  pinMode(DO, INPUT);</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  <span class="comment">// 初始化彩屏</span></span><br><span class="line">  tft.init();</span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line">  <span class="comment">// 设置屏幕旋转 180 度 屏幕旋转是因为我的屏幕是立着的。根据自己需要。1是90度</span></span><br><span class="line">  tft.setRotation(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 设置 4 号字体，绿色文本颜色</span></span><br><span class="line">  tft.setTextFont(<span class="number">4</span>);</span><br><span class="line">  tft.setTextColor(TFT_GREEN); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//模拟信号</span></span><br><span class="line">  <span class="keyword">double</span> value = analogRead(AO);</span><br><span class="line">  value = <span class="number">100</span>-(value / <span class="number">1024</span> *<span class="number">100</span>);<span class="comment">//模拟信号在湿度为0时是1024，随湿度增加数字降低。这边进行转换成正向的百分比。</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取DHT的空气湿度和温度</span></span><br><span class="line">  <span class="keyword">float</span> h = dht.readHumidity();</span><br><span class="line">  <span class="keyword">float</span> t = dht.readTemperature();</span><br><span class="line">  </span><br><span class="line"><span class="comment">//设置文字颜色的绿色</span></span><br><span class="line">  tft.setTextColor(TFT_GREEN);</span><br><span class="line">  <span class="comment">//设置屏幕颜色为黑色</span></span><br><span class="line">  tft.fillScreen(TFT_BLACK);</span><br><span class="line">  tft.drawBitmap(<span class="number">0</span>, <span class="number">0</span>, str_1, <span class="number">16</span>, <span class="number">16</span>, TFT_GREEN);<span class="comment">//土</span></span><br><span class="line">  tft.drawBitmap(<span class="number">20</span>, <span class="number">0</span>, str_2, <span class="number">16</span>, <span class="number">16</span>, TFT_GREEN);<span class="comment">//壤</span></span><br><span class="line">  tft.drawBitmap(<span class="number">40</span>, <span class="number">0</span>, str_3, <span class="number">16</span>, <span class="number">16</span>, TFT_GREEN);<span class="comment">//湿</span></span><br><span class="line">  tft.drawBitmap(<span class="number">60</span>, <span class="number">0</span>, str_4, <span class="number">16</span>, <span class="number">16</span>, TFT_GREEN);<span class="comment">//度</span></span><br><span class="line">  tft.drawBitmap(<span class="number">80</span>, <span class="number">0</span>, str_8, <span class="number">16</span>, <span class="number">16</span>, TFT_GREEN);<span class="comment">//:</span></span><br><span class="line">  <span class="comment">//输出土壤湿度的值</span></span><br><span class="line">  tft.setCursor(<span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line">  tft.print(value);</span><br><span class="line">  tft.println(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  tft.setTextColor(TFT_RED);</span><br><span class="line">  <span class="comment">//室内湿度:  的五个汉字</span></span><br><span class="line">  tft.drawBitmap(<span class="number">0</span>, <span class="number">50</span>, str_5, <span class="number">16</span>, <span class="number">16</span>, TFT_RED);</span><br><span class="line">  tft.drawBitmap(<span class="number">20</span>, <span class="number">50</span>, str_6, <span class="number">16</span>, <span class="number">16</span>, TFT_RED);</span><br><span class="line">  tft.drawBitmap(<span class="number">40</span>, <span class="number">50</span>, str_3, <span class="number">16</span>, <span class="number">16</span>, TFT_RED);</span><br><span class="line">  tft.drawBitmap(<span class="number">60</span>, <span class="number">50</span>, str_4, <span class="number">16</span>, <span class="number">16</span>, TFT_RED);</span><br><span class="line">  tft.drawBitmap(<span class="number">80</span>, <span class="number">50</span>, str_8, <span class="number">16</span>, <span class="number">16</span>, TFT_RED);</span><br><span class="line"> </span><br><span class="line">  tft.setCursor(<span class="number">0</span>, <span class="number">70</span>);</span><br><span class="line">  tft.print(h);</span><br><span class="line">  tft.println(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  tft.setTextColor(TFT_YELLOW);</span><br><span class="line">  <span class="comment">//室内温度</span></span><br><span class="line">  tft.drawBitmap(<span class="number">0</span>, <span class="number">100</span>, str_5, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  tft.drawBitmap(<span class="number">20</span>, <span class="number">100</span>, str_6, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  tft.drawBitmap(<span class="number">40</span>, <span class="number">100</span>, str_7, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  tft.drawBitmap(<span class="number">60</span>, <span class="number">100</span>, str_4, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  tft.drawBitmap(<span class="number">80</span>, <span class="number">100</span>, str_8, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  </span><br><span class="line">  tft.setCursor(<span class="number">0</span>, <span class="number">120</span>);</span><br><span class="line">  tft.print(t);</span><br><span class="line">  tft.drawBitmap(<span class="number">70</span>, <span class="number">124</span>, str_9, <span class="number">16</span>, <span class="number">16</span>, TFT_YELLOW);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//延迟1秒刷新数据</span></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">NodeMCU(esp8266)制作温湿度传感器</summary>
    
    
    
    <category term="技术分享" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="nodemcu,esp8266,温湿度传感器,土壤湿度传感器,DHT11" scheme="https://www.kikohk.top/tags/nodemcu-esp8266-%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-%E5%9C%9F%E5%A3%A4%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-DHT11/"/>
    
  </entry>
  
  <entry>
    <title>J2EE开发（二）</title>
    <link href="https://www.kikohk.top/article/cc38/"/>
    <id>https://www.kikohk.top/article/cc38/</id>
    <published>2020-10-03T02:10:37.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h4 id="回车绑定button点击"><a href="#回车绑定button点击" class="headerlink" title="回车绑定button点击"></a>回车绑定button点击</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(&quot;body&quot;).keydown(function() &#123;</span><br><span class="line">        if (event.keyCode == &quot;13&quot;) &#123;//keyCode=13是回车键</span><br><span class="line">            $(&#x27;#login-btn&#x27;).click();//换成按钮的id即可</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;学习笔记&quot;&gt;&lt;a href=&quot;#学习笔记&quot; class=&quot;headerlink&quot; title=&quot;学习笔记&quot;&gt;&lt;/a&gt;学习笔记&lt;/h2&gt;&lt;h4 id=&quot;回车绑定button点击&quot;&gt;&lt;a href=&quot;#回车绑定button点击&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="JS, J2EE" scheme="https://www.kikohk.top/tags/JS-J2EE/"/>
    
  </entry>
  
  <entry>
    <title>阿里云ECS 7天训练营【第二天】</title>
    <link href="https://www.kikohk.top/article/6f26/"/>
    <id>https://www.kikohk.top/article/6f26/</id>
    <published>2020-09-24T11:09:25.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基于ECS快速搭建Docker环境"><a href="#基于ECS快速搭建Docker环境" class="headerlink" title="基于ECS快速搭建Docker环境"></a>基于ECS快速搭建Docker环境</h3><p>本教程介绍如何快速搭建Docker环境，并使用Docker部署一个Nginx服务。</p><h4 id="1-连接服务器"><a href="#1-连接服务器" class="headerlink" title="1.连接服务器"></a>1.连接服务器</h4><p>使用ssh连接ECS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh root@公网IP</span><br></pre></td></tr></table></figure><h4 id="2-安装Docker-CE"><a href="#2-安装Docker-CE" class="headerlink" title="2.安装Docker CE"></a>2.安装Docker CE</h4><p>本教程使用CentOS 7安装Docker CE</p><ol><li> 安装Docker的依赖库。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>出现Complste就是安装成功</p><p><img src="https://i.loli.net/2020/09/24/qZSo1T25IH4spDB.png"></p><ol start="2"><li> 添加Docker CE的软件源信息。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="3"><li> 安装Docker CE。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><ol start="4"><li> 启动Docker服务。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="配置阿里云镜像仓库（镜像加速）"><a href="#配置阿里云镜像仓库（镜像加速）" class="headerlink" title="配置阿里云镜像仓库（镜像加速）"></a>配置阿里云镜像仓库（镜像加速）</h4><p>Docker的默认官方远程仓库是hub.docker.com，下载速度较慢，所以需要更换为阿里云的仓库</p><p>登录阿里云账号开通容器镜像服务</p><p>c. 登录成功页面如下。（若弹出开通服务窗口，关闭即可）</p><p><img src="https://i.loli.net/2020/09/24/kbdwTgaOMF5iE6s.png"></p><ol start="2"><li> 单击【镜像中心】 &gt; 【镜像加速器】，可以看到阿里云为您提供了一个专属的镜像加速地址。</li></ol><p><img src="https://i.loli.net/2020/09/24/EKvLC8kcRubTDJH.png"></p><ol start="3"><li> 配置Docker的自定义镜像仓库地址。请将下面命令中的镜像仓库地址<a href="https://kqh8****.mirror.aliyuncs.com替换为阿里云为您提供的专属镜像加速地址./">https://kqh8****.mirror.aliyuncs.com替换为阿里云为您提供的专属镜像加速地址。</a></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://kqh8****.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><ol start="4"><li> 重新加载服务配置文件。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><ol start="5"><li> 重启Docker服务。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="使用Docker安装Nginx服务"><a href="#使用Docker安装Nginx服务" class="headerlink" title="使用Docker安装Nginx服务"></a>使用Docker安装Nginx服务</h3><ol><li> 查看Docker镜像仓库中Nginx的可用版本。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure><ol start="2"><li> 拉取最新版的Nginx镜像。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/09/24/t1zKTwxjG9WA3oE.png"></p><ol start="3"><li> 查看本地镜像。</li></ol><p><img src="https://i.loli.net/2020/09/24/b8umRtr2slqKTMJ.png"></p><ol start="4"><li> 运行容器。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>命令参数说明：</p><ul><li>name nginx-test：容器名称。</li><li>p 8080:80： 端口进行映射，将本地8080端口映射到容器内部的80端口。</li><li>d nginx： 设置容器在后台一直运行。</li></ul><p>命令输出如下所示：<br><img src="https://i.loli.net/2020/09/24/uQEdVftpnXN4ORA.png"></p><ol start="5"><li> 在浏览器地址栏输入http://&lt;ECS公网地址&gt;:8080访问Nginx服务。</li></ol><p><img src="https://i.loli.net/2020/09/24/dxbNcTe1ODfMPiG.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基于ECS快速搭建Docker环境&quot;&gt;&lt;a href=&quot;#基于ECS快速搭建Docker环境&quot; class=&quot;headerlink&quot; title=&quot;基于ECS快速搭建Docker环境&quot;&gt;&lt;/a&gt;基于ECS快速搭建Docker环境&lt;/h3&gt;&lt;p&gt;本教程介绍如何快速搭</summary>
      
    
    
    
    <category term="技术" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="ECS,FTP,阿里云" scheme="https://www.kikohk.top/tags/ECS-FTP-%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>去除密码框的小眼睛</title>
    <link href="https://www.kikohk.top/article/7ad/"/>
    <id>https://www.kikohk.top/article/7ad/</id>
    <published>2020-09-16T14:09:21.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<p> 在写登录表单时发现，密码输入框input type=password 会默认带一个小眼睛，点击小眼睛可以查看到密码。</p><p><img src="https://i.loli.net/2020/09/16/Cxulf4s6FRViOXN.png"></p><p> 因为我自己写了一个显示密码的小眼睛，所以这个眼睛不需要了。这时怎么清楚呢？<br>利用下面的css即可：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 清楚密码框的眼睛 */</span></span><br><span class="line">::-ms-reveal &#123;</span><br><span class="line"><span class="attr">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>::-ms-reveal是密码查看按钮，也就密码框右边的小眼睛。</p><p> 另外，input 当type=“text”时，右边会有一个小叉叉，可以用下面的代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">::-ms-clear &#123;</span><br><span class="line"><span class="attr">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 在写登录表单时发现，密码输入框input type=password 会默认带一个小眼睛，点击小眼睛可以查看到密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/16/Cxulf4s6FRViOXN.png&quot;&gt;&lt;/p&gt;
&lt;p&gt; </summary>
      
    
    
    
    <category term="小技巧" scheme="https://www.kikohk.top/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="小技巧" scheme="https://www.kikohk.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>J2EE学习</title>
    <link href="https://www.kikohk.top/article/e415/"/>
    <id>https://www.kikohk.top/article/e415/</id>
    <published>2020-09-10T06:10:08.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="J2EE-项目开发"><a href="#J2EE-项目开发" class="headerlink" title="J2EE 项目开发"></a>J2EE 项目开发</h2><h3 id="校园即时通讯系统"><a href="#校园即时通讯系统" class="headerlink" title="校园即时通讯系统"></a>校园即时通讯系统</h3><h4 id="技能点"><a href="#技能点" class="headerlink" title="技能点"></a>技能点</h4><ul><li>前后端分离技术能力</li><li>前端框架技术</li><li>前端插件</li><li>SSM框架</li><li>数据安全技术</li><li>数据分析</li></ul><h3 id="使用bootstrap搭建前端页面"><a href="#使用bootstrap搭建前端页面" class="headerlink" title="使用bootstrap搭建前端页面"></a>使用bootstrap搭建前端页面</h3><h5 id="触底监听"><a href="#触底监听" class="headerlink" title="触底监听"></a>触底监听</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="comment">//当前滚动条的位置    &gt;= （文档高度-窗口高度）</span></span><br><span class="line"><span class="keyword">if</span>($(<span class="built_in">document</span>).scrollTop() &gt;= ($(<span class="built_in">document</span>).height() - $(<span class="built_in">window</span>).height()))&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;触底了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="返回顶部悬浮按钮"><a href="#返回顶部悬浮按钮" class="headerlink" title="返回顶部悬浮按钮"></a>返回顶部悬浮按钮</h5><p><img src="https://i.loli.net/2020/09/23/7R19mxjqJS8hHMu.png" alt="enter description here"></p><p>html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;goTop&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;glyphicon glyphicon-chevron-up&quot;</span> <span class="attr">id</span>=<span class="string">&quot;up&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.goTop</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">3%</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> scroH = $(<span class="built_in">document</span>).scrollTop(); <span class="comment">//滚动高度</span></span><br><span class="line"><span class="keyword">if</span> (scroH &gt;= <span class="number">100</span>) &#123; <span class="comment">// 显示</span></span><br><span class="line">$(<span class="string">&#x27;.goTop&#x27;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>) </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 消失</span></span><br><span class="line">$(<span class="string">&#x27;.goTop&#x27;</span>).removeAttr(<span class="string">&quot;style&quot;</span>) </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 点击事件 </span></span><br><span class="line">$(<span class="string">&#x27;.goTop&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (scroH != <span class="number">0</span>) &#123;</span><br><span class="line">$(<span class="string">&#x27;body,html&#x27;</span>).stop().animate(&#123;&#125;).animate(&#123; </span><br><span class="line"><span class="attr">scrollTop</span>: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">&#125;, <span class="number">600</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;J2EE-项目开发&quot;&gt;&lt;a href=&quot;#J2EE-项目开发&quot; class=&quot;headerlink&quot; title=&quot;J2EE 项目开发&quot;&gt;&lt;/a&gt;J2EE 项目开发&lt;/h2&gt;&lt;h3 id=&quot;校园即时通讯系统&quot;&gt;&lt;a href=&quot;#校园即时通讯系统&quot; class=&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://www.kikohk.top/categories/java/"/>
    
    
    <category term="J2EE" scheme="https://www.kikohk.top/tags/J2EE/"/>
    
  </entry>
  
  <entry>
    <title>电脑重装后需要的配置</title>
    <link href="https://www.kikohk.top/article/6a0d/"/>
    <id>https://www.kikohk.top/article/6a0d/</id>
    <published>2020-09-02T09:10:31.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电脑重装配置"><a href="#电脑重装配置" class="headerlink" title="电脑重装配置"></a>电脑重装配置</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>jdk 环境变量</p><p>‘’’<br>JAVA_HOME<br>‘’’</p><p>‘’’<br>%JAVA_HOME%/jdk/bin<br>‘’’</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;电脑重装配置&quot;&gt;&lt;a href=&quot;#电脑重装配置&quot; class=&quot;headerlink&quot; title=&quot;电脑重装配置&quot;&gt;&lt;/a&gt;电脑重装配置&lt;/h2&gt;&lt;h3 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;j</summary>
      
    
    
    
    
    <category term="音乐" scheme="https://www.kikohk.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>测试音乐 ⎛⎝◕‿‿◕⎠⎞</title>
    <link href="https://www.kikohk.top/article/6a0d/"/>
    <id>https://www.kikohk.top/article/6a0d/</id>
    <published>2020-09-02T09:10:31.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h3><p><a href="https://plushine.cn/52527.html#%E5%89%8D%E8%A8%80">明月浩空音乐搭建教程</a></p><p><a href="https://music.m0x.cn/">梨花带雨播放器</a></p><h4 id="APlayer"><a href="#APlayer" class="headerlink" title="APlayer"></a>APlayer</h4><p>data-id =&gt;音乐页面链接上的id号</p><p>data-server =&gt; 平台名称。netease：网易；tencent：腾讯；xiami：虾米；kugou：酷狗；baidu：百度</p><p>data-type=&gt;类型。playlist：歌单；song：单曲；专辑：album；关键词：search；歌手：artist</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;播放器&quot;&gt;&lt;a href=&quot;#播放器&quot; class=&quot;headerlink&quot; title=&quot;播放器&quot;&gt;&lt;/a&gt;播放器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://plushine.cn/52527.html#%E5%89%8D%E8%A8%80&quot;&gt;明月浩空音乐</summary>
      
    
    
    
    
    <category term="音乐" scheme="https://www.kikohk.top/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Coding+GitHub双部署博客</title>
    <link href="https://www.kikohk.top/article/b3cd/"/>
    <id>https://www.kikohk.top/article/b3cd/</id>
    <published>2020-09-02T07:09:26.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<p>今天将博客在<a href="https://coding.net/">Coding</a>和<a href="https://github.com/">GitHub</a>上同步部署上了博客，同一域名，实现国内访问Coding，境外访问GitHub。访问速度相较于GitHub还是快了很多，而且git上传代码也比GitHub快。</p><p><img src="https://i.loli.net/2020/09/02/Z34tdsyoQP2LrjT.png" alt="站长之家速度对比"></p><h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><h4 id="1-Coding上传博客源码"><a href="#1-Coding上传博客源码" class="headerlink" title="1.Coding上传博客源码"></a>1.Coding上传博客源码</h4><p>首先，注册<a href="https://coding.net/">Coding</a></p><p><img src="https://i.loli.net/2020/09/03/8VXYQZ73svd1JfW.png" alt="名称随意"></p><p>注册完之后，来到控制台新建项目</p><p><img src="https://i.loli.net/2020/09/03/Id9jk8imPO3zHW7.png" alt="新建项目"></p><p><img src="https://i.loli.net/2020/09/03/fglSxGupOoZd5Vy.png" alt="选择第一个"></p><p><img src="https://i.loli.net/2020/09/03/9iz7jIxaBk5XLDZ.png" alt="名称随意"></p><p>新建完项目之后创建<strong>两个</strong>代码仓库，一个放==博客源码==，另一个放博客的==静态页面==</p><p><img src="https://i.loli.net/2020/09/03/o6AVgWfajpnJcSu.png" alt="新建代码仓库"></p><p>记得勾选启用md</p><p><img src="https://i.loli.net/2020/09/03/y2RhK8MdHsoTOC1.png" alt="名称随意"></p><p>创建完后克隆仓库到本地</p><p><img src="https://i.loli.net/2020/09/03/3sA8v2KeEYDUpbi.png" alt="克隆仓库"></p><p>git克隆操作这里就不讲了，大家应该都会。不会的可以<a href="https://www.kikohk.top/article/3899/#%E4%BA%8C%E3%80%81%E4%B8%8A%E4%BC%A0%E8%87%B3GitHub%E3%80%82">看我以前的文章</a></p><p>克隆完之后，将你的hexo博客的源码全部复制到同一个文件夹下。==记住不要将原来的.git文件夹复制过来。 #F44336==</p><p><strong>接下来一步很重要</strong></p><p><strong>==前提：github仓库的克隆地址、coding博客静态页面的克隆地址==</strong></p><p>找到博客<strong>根目录</strong>下的_config.yml文件，进行编辑</p><p>找到deploy</p><p><img src="https://i.loli.net/2020/09/03/5fLD61JrPU2i9Gj.png" alt="deploy"></p><p>接下来需要github的token、coding的token和token名称</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  <span class="attr">repo</span>:</span><br><span class="line">    github: https:<span class="comment">//github的token@github.com/github用户名/github用户名.github.io.git</span></span><br><span class="line">    coding: https:<span class="comment">//令牌用户名:Coding的token@e.coding.net/kikohacker/项目名/源码仓库名.git</span></span><br></pre></td></tr></table></figure><p>先放着上面不管，先去获取token，github的token这里就不讲了<a href="https://www.kikohk.top/article/3899/#%E5%8E%BBgithub%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE%E6%89%BE%E5%88%B0Developer-settings%E2%80%93-gt-Personal-access-tokens-%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AAtoken">以前的文章也讲过</a>，说一说coding<br>找到右上角-个人设置-访问令牌-新建令牌</p><p><img src="https://i.loli.net/2020/09/03/KOr7y6jcJkzRTqh.png" alt="新建令牌"></p><p>其实只需要用到第一个，但是全部勾选了也没事</p><p><img src="https://i.loli.net/2020/09/03/75ohtuyMVIKHXfQ.png" alt="名称随意，勾选第一个"></p><p>复制令牌用户名和token</p><p><img src="https://i.loli.net/2020/09/03/jrUm5f6bwvzX3BL.png" alt="然后分别记录用户名和token"></p><p>然后将token填入上面的代码保存就可以了。</p><p>现在去发布试试能不能提交到两个仓库。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>都没有报错就行</p><h5 id="开启静态网站"><a href="#开启静态网站" class="headerlink" title="开启静态网站"></a>开启静态网站</h5><p>新建静态网站</p><p><img src="https://i.loli.net/2020/09/03/R5p8zlYHOJu4AvN.png" alt="项目找到静态网站"></p><p>名称随意</p><p><img src="https://i.loli.net/2020/09/03/lY5mCRcNZeBdrj7.png" alt="仓库选择静态页面仓库"></p><p>之后点击立即部署，等待一会，打开访问地址就可以访问你的博客了。</p><p><img src="https://i.loli.net/2020/09/03/NIOh9jCrpezHft5.png" alt="我有两个地址是因为我绑定了一个域名"></p><h4 id="2-Coding持续集成"><a href="#2-Coding持续集成" class="headerlink" title="2.Coding持续集成"></a>2.Coding持续集成</h4><p>项目中找到持续计划-新建</p><p><img src="https://i.loli.net/2020/09/03/rZMzKlsIaNjnb4u.png" alt="持续计划"></p><p>拉到最下面，自定义构建<br><img src="https://i.loli.net/2020/09/03/7cfXFUMHETvaoh3.png" alt="自定义"></p><p>选择源码仓库后确定</p><p><img src="https://i.loli.net/2020/09/03/8MXHkDCOhf9ui2y.png" alt="选择文本编辑器"></p><p>输入代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;克隆项目&#x27;</span></span>)</span> &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;git clone https://令牌用户名:你的token@e.coding.net/kikohacker/项目名/你的源码仓库名.git .&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;ls -a&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;安装依赖&#x27;</span></span>)</span> &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;ls -a&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;npm install -g cnpm --registry=https://registry.npm.taobao.org&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;cnpm install -g hexo-cli&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;cnpm install hexo --save&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;cnpm install&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;构建发布&#x27;</span></span>)</span> &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">&#x27;hexo clean&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;rm -rf .deploy_git&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;hexo g&#x27;</span></span><br><span class="line">        sh <span class="string">&#x27;hexo d&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改完保存即可，点击立即构建。等待成功。</p><p>这里应该问题挺大的。我在这里卡了两小时。有错误的在下下面留言。</p><p>错误大多数都是代码写错，少了个冒号或者 . ，仔细检查一下</p><p>成功的话，在coding的静态页面仓库和github的仓库都会有提交。页面能正常访问</p><p>没有问题的，博客就部署好了。以后只要在用git将本地的源码push上去，就能自动部署。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天将博客在&lt;a href=&quot;https://coding.net/&quot;&gt;Coding&lt;/a&gt;和&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;上同步部署上了博客，同一域名，实现国内访问Coding，境外访问GitHub。访问速度相较于GitH</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="博客搭建" scheme="https://www.kikohk.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub+Action+腾讯云函数+语雀搭建自动化个人博客</title>
    <link href="https://www.kikohk.top/article/3899/"/>
    <id>https://www.kikohk.top/article/3899/</id>
    <published>2020-09-02T04:31:00.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<p>这应该是目前全网最全面的博客搭建教程了。将从最基础hexo的创建到语雀写博客为止。</p><h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><hr><p>准备条件：这些提前准备好，本文不做讲解。不会安装百度解决</p><ul><li><a href="https://npm.taobao.org/mirrors/git-for-windows/">Git</a> </li><li><a href="http://nodejs.cn/download/">node.js</a> </li><li><a href="https://github.com/join">github账号</a> </li></ul><hr><h1 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h1><p>由于npm在国内下载比较慢，所以在国内推荐使用淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><ol><li> 创建文件夹blog</li><li> 地址栏输入cmd或者在文件夹里右键git bash</li><li> 输入命令,安装hexo脚手架。</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>接下来<strong>创建博客文件</strong>，接着在命令行输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li> _config.yml: 博客的配置文件</li></ul><p>接下来是一些hexo的<a href="https://hexo.io/zh-cn/docs/commands.html#generate">常用指令</a>：</p><ul><li><p>生成public文件。就是生成的静态博客文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure></li><li><p>生成 .deploy_git 文件夹，可以上传里面的文件至github</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>其他的命令不太常用，就不介绍了，自己官网看文档去。<br>你可以自己先安装一些主题，写一些配置，本地预览一下，再进行上传。</p></li></ul><h3 id="安装-yuque-hexo"><a href="#安装-yuque-hexo" class="headerlink" title="安装 yuque-hexo"></a>安装 <a href="https://github.com/x-cold/yuque-hexo">yuque-hexo</a></h3><p>在命令行输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install yuque-hexo --save</span><br></pre></td></tr></table></figure><p>编辑<code>package.json</code>文件，添加以下内容</p><p><strong>1.在”scripts”标签中添加</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;start&quot;: &quot;yuque-hexo clean &amp;&amp; yuque-hexo sync &amp;&amp; hexo clean &amp;&amp; hexo generate&quot;,</span><br></pre></td></tr></table></figure><p><strong>2.在末尾添加（记得修改中文提示的内容）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;yuqueConfig&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;https://www.yuque.com/api/v2&quot;,</span><br><span class="line">    &quot;login&quot;: &quot;语雀的id&quot;,</span><br><span class="line">    &quot;repo&quot;: &quot;语雀知识库名称&quot;,</span><br><span class="line">    &quot;mdNameFormat&quot;: &quot;title&quot;,</span><br><span class="line">    &quot;postPath&quot;: &quot;source/_posts&quot;,</span><br><span class="line">    &quot;onlyPublished&quot;: false</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="https://i.loli.net/2020/09/03/7VThU2p3Wj4lMCs.png" alt="红框处"></p><h1 id="二、上传至GitHub。"><a href="#二、上传至GitHub。" class="headerlink" title="二、上传至GitHub。"></a>二、上传至GitHub。</h1><p>首先，我们需要两个仓库（<a href="https://www.cnblogs.com/zhixi/p/9584624.html">github教程</a>），一个放hexo的源文件，一个放hexo生成的静态文件。<br>源文件仓库名字随意（假设为hexoblog），可以设置为私有仓库；静态文件仓库的名字为你的github名.github.io 必须为公开库。<br>创建好仓库后，将源文件上传至hexoblog仓库。</p><p>打开命令行cmd或者git bash</p><ol><li><p><strong>初始化本地仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>此时会生成一个隐藏的.git文件夹</p></li></ol><ol start="2"><li><strong>将所有文件纳入git版本管理中</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>将所有更改放到本地暂存区域，等待上传。</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;上传的说明&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>连接远程仓库</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin &quot;远程仓库地址&quot;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>上传至远程仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><p>如果报错，先  git pull（拉取远程仓库）<br>或者强制上传（会覆盖原来所有文件）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -u origin master -f</span><br></pre></td></tr></table></figure><h1 id="三、配置GitHub-Action"><a href="#三、配置GitHub-Action" class="headerlink" title="三、配置GitHub Action"></a>三、配置GitHub Action</h1><ol><li><p><strong>获取公钥和私钥</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github 的邮箱地址&quot;</span><br></pre></td></tr></table></figure></li></ol><p>后面的全部回车不用管。<br>然后会在C:\Users\用户名.ssh 目录生产两个文件：id_rsa（私钥）和id_rsa.pub（公钥），记事本打开，复制公钥的内容</p><ol start="2"><li><strong>GitHub上添加公钥</strong></li></ol><p>打开GitHub，右上角头像–&gt;Setting–&gt;SSH and GPG keys–&gt;New SSH key，名称随便填，内容填写复制的公钥内容</p><ol start="3"><li><strong>源码仓库添加私钥</strong></li></ol><p>进入hexoblog源码仓库，找到Setting–&gt;Secrets–&gt;Add a new secret ，名称填写HEXO_DEPLOY_PRIVATE_KEY</p><p><img src="https://i.loli.net/2020/09/03/HcVh324uYTiLCSO.png" alt="添加私钥"></p><ol start="4"><li><strong>获得语雀的Token</strong></li></ol><p>注册语雀语雀上点击个人头像 –&gt; 设置 –&gt; Token 即可获取，同样在源码仓库的Secrets进行填写，名称为YUQUE_TOKEN</p><ol start="5"><li><strong>填写Action</strong></li></ol><p>找到源码仓库的Action，set up a workflow yourself</p><p><img src="https://i.loli.net/2020/09/03/Nfpk4h6BD9suQnY.jpg" alt="set up a workflow yourself"></p><p>名字随意，将下面代码填入.。注意修改43行，你的github名称，其他的不用修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># workflow name</span><br><span class="line">name: Deploy To Github Pages</span><br><span class="line"></span><br><span class="line"># 当有 push 到仓库和外部触发的时候就运行</span><br><span class="line">on: [push, repository_dispatch]</span><br><span class="line"></span><br><span class="line"># YUQUE_TOKEN</span><br><span class="line"># Github_SSH_PRIVATE_KEY</span><br><span class="line">jobs:</span><br><span class="line">  deploy: </span><br><span class="line">    name: Deploy Hexo Public To Pages</span><br><span class="line">    runs-on: ubuntu-latest </span><br><span class="line">    env:</span><br><span class="line">      TZ: Asia/Shanghai    </span><br><span class="line">        </span><br><span class="line">    steps:</span><br><span class="line">    # check it to your workflow can access it</span><br><span class="line">    # from: https://github.com/actions/checkout</span><br><span class="line">    - name: Checkout Repository master branch</span><br><span class="line">      uses: actions/checkout@master </span><br><span class="line">      </span><br><span class="line">    # from: https://github.com/actions/setup-node  </span><br><span class="line">    - name: Setup Node.js 10.x </span><br><span class="line">      uses: actions/setup-node@master</span><br><span class="line">      with:</span><br><span class="line">        node-version: &quot;10.x&quot;</span><br><span class="line">    </span><br><span class="line">    # from https://github.com/x-cold/yuque-hexo</span><br><span class="line">    - name: Setup Hexo Dependencies and Generate Public Files</span><br><span class="line">      env:</span><br><span class="line">        YUQUE_TOKEN: $&#123;&#123; secrets.YUQUE_TOKEN &#125;&#125;</span><br><span class="line">      run: |</span><br><span class="line">        npm install hexo-cli -g</span><br><span class="line">        npm install yuque-hexo -g</span><br><span class="line">        npm install</span><br><span class="line">        npm run start</span><br><span class="line">        </span><br><span class="line">    # from https://github.com/peaceiris/actions-gh-pages    </span><br><span class="line">    - name: Deploy</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">      with:</span><br><span class="line">          deploy_key: $&#123;&#123; secrets.HEXO_DEPLOY_PRIVATE_KEY&#125;&#125;</span><br><span class="line">          external_repository: 你的github名称/你的github名称.github.io</span><br><span class="line">          publish_branch: master</span><br><span class="line">          publish_dir: ./public</span><br><span class="line">          commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>保存就会自动执行一次。</li></ol><h1 id="四、配置腾讯-serverless-云函数"><a href="#四、配置腾讯-serverless-云函数" class="headerlink" title="四、配置腾讯 serverless 云函数"></a>四、配置腾讯 serverless 云函数</h1><ol><li>登录腾讯云，搜索云函数，创建</li><li>选择 <code>python</code>，2.7 和 3.6 都行，空白函数</li></ol><p><img src="https://i.loli.net/2020/09/03/HIMJzaneSOmx9Wt.png" alt="名称随意，空白函数"></p><h3 id="去github账号设置找到Developer-settings–-gt-Personal-access-tokens-新建一个token"><a href="#去github账号设置找到Developer-settings–-gt-Personal-access-tokens-新建一个token" class="headerlink" title="去github账号设置找到Developer settings–&gt;Personal access tokens,新建一个token"></a>去github账号设置找到Developer settings–&gt;Personal access tokens,新建一个token</h3><p>勾选下面4个或者全部勾选。复制token</p><p><img src="https://i.loli.net/2020/09/03/NXaBfCyTKkqgmzI.jpg" alt="复制token"></p><p><strong>粘贴下面的代码，记得修改中文提示</strong></p><p><img src="https://i.loli.net/2020/09/03/mvsQfYEIqt6rKbL.png" alt="修改github用户名和token"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf8 -*-</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def main_handler(event, context):</span><br><span class="line">    r = requests.post(&quot;https://api.github.com/repos/你的github用户名/源码仓库名/dispatches&quot;,</span><br><span class="line">    json = &#123;&quot;event_type&quot;: &quot;start&quot;&#125;,</span><br><span class="line">    headers = &#123;&quot;User-Agent&quot;:&#x27;curl/7.52.1&#x27;,</span><br><span class="line">              &#x27;Content-Type&#x27;: &#x27;application/json&#x27;,</span><br><span class="line">              &#x27;Accept&#x27;: &#x27;application/vnd.github.everest-preview+json&#x27;,</span><br><span class="line">              &#x27;Authorization&#x27;: &#x27;token github的token&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">    if r.status_code == 204:</span><br><span class="line">        return &quot;This&#x27;s OK!&quot; </span><br><span class="line">    else:</span><br><span class="line">        return r.status_code</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>填完测试一下，返回This’s OK!就是成功了。这时，去源码仓库会发现Action正在执行。</p><h3 id="点击触发管理，配置触发方式，保存-访问路径，后面要用到"><a href="#点击触发管理，配置触发方式，保存-访问路径，后面要用到" class="headerlink" title="点击触发管理，配置触发方式，保存 访问路径，后面要用到"></a>点击触发管理，配置触发方式，保存 访问路径，后面要用到</h3><p>触发方式：API 网关触发器<br>注：如果提示没有权限，去用户组添加权限    </p><p><img src="https://i.loli.net/2020/09/03/Kyj86Cq9ou4bprP.png" alt="触发方式"></p><h1 id="五、配置语雀"><a href="#五、配置语雀" class="headerlink" title="五、配置语雀"></a>五、配置语雀</h1><ol><li>注册，登录</li><li>创建知识库–&gt;文档知识库–&gt;可见范围为互联网可见</li><li>工作台–&gt;知识库–&gt;找到新创建的知识库，管理–&gt;设置–&gt;路径进行自定义，找到u加一串数字的，这个就是用户id，填到上面package.json中的 “login”</li><li>找到开发者，添加Web Hook，url填写刚刚腾讯云函数的url</li></ol><p><img src="https://i.loli.net/2020/09/03/PnqY7HDkLGazjip.jpg" alt="添加Web Hook"></p><p>这一步就大功告成了！<br>属于自己的个人博客就搭建完成了，永久免费（除非github倒闭）！</p><h1 id="六、发布文章"><a href="#六、发布文章" class="headerlink" title="六、发布文章"></a>六、发布文章</h1><p>接下来，只要在语雀的知识库里发布文章，语雀就会触发云函数，云函数触发Action，Action进行编译，利用yuque-hexo向语雀获得文章，再提交到静态博客的仓库。这样就实现在线博客的功能啦！</p><p>本篇结束。有问题的可以留言或者联系我哦。</p>]]></content>
    
    
    <summary type="html">这应该是目前全网最全面的博客搭建教程了。将从最基础hexo的创建到语雀写博客为止。</summary>
    
    
    
    <category term="技术分享" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="博客搭建" scheme="https://www.kikohk.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用Navicat连接阿里云ECS上的Mysql数据库</title>
    <link href="https://www.kikohk.top/article/830a/"/>
    <id>https://www.kikohk.top/article/830a/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打开Navicat，连接"><a href="#打开Navicat，连接" class="headerlink" title="打开Navicat，连接"></a>打开Navicat，连接</h4><p>选择阿里云 云数据库MySQL版<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2404891/1598847365337-5da16c4e-168c-49da-a19a-53981c1f4eeb.png#align=left&display=inline&height=260&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=523&size=37327&status=done&style=none&width=261.5" alt="image.png"></p><h4 id="填写云数据库的用户名、密码"><a href="#填写云数据库的用户名、密码" class="headerlink" title="填写云数据库的用户名、密码"></a>填写云数据库的用户名、密码</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2404891/1598854112992-bc7e3f09-a097-480f-8b18-00d35f806d0a.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=593&size=23812&status=done&style=none&width=296.5" alt="image.png"></p><h4 id="找到SSH选项吗，填写服务器外网IP，服务器登录名，默认root，密码。测试连接，成功就确定。"><a href="#找到SSH选项吗，填写服务器外网IP，服务器登录名，默认root，密码。测试连接，成功就确定。" class="headerlink" title="找到SSH选项吗，填写服务器外网IP，服务器登录名，默认root，密码。测试连接，成功就确定。"></a>找到SSH选项吗，填写服务器外网IP，服务器登录名，默认root，密码。测试连接，成功就确定。</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2404891/1598854178952-e9e2520b-2dce-425d-bb3d-0e23c92c3b69.png#align=left&display=inline&height=337&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=593&size=26426&status=done&style=none&width=296.5" alt="image.png"></p><h4 id="连接成功出现数据库"><a href="#连接成功出现数据库" class="headerlink" title="连接成功出现数据库"></a>连接成功出现数据库</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2404891/1598854242514-2adcebd2-591e-4ce1-b9d7-62517dd89980.png#align=left&display=inline&height=69&margin=%5Bobject%20Object%5D&name=image.png&originHeight=137&originWidth=232&size=5493&status=done&style=none&width=116" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;打开Navicat，连接&quot;&gt;&lt;a href=&quot;#打开Navicat，连接&quot; class=&quot;headerlink&quot; title=&quot;打开Navicat，连接&quot;&gt;&lt;/a&gt;打开Navicat，连接&lt;/h4&gt;&lt;p&gt;选择阿里云 云数据库MySQL版&lt;br&gt;&lt;img src=&quot;</summary>
      
    
    
    
    <category term="技术" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="mysql" scheme="https://www.kikohk.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器运行jar，并一直保持运行</title>
    <link href="https://www.kikohk.top/article/a5bb/"/>
    <id>https://www.kikohk.top/article/a5bb/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<p>我在阿里云部署java程序时，在ssh使用java -jar xxx.jar时，一旦关闭ssh，进程也会关闭。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>为了保持运行，使用一下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure><p>当前目录下会生成一个nohup.out文件，控制台输入的东西会会被转移到这个文件中。并且执行内容。</p><p>nohup 是 no hang up 的缩写，就是不挂断的意思。<br>nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我在阿里云部署java程序时，在ssh使用java -jar xxx.jar时，一旦关闭ssh，进程也会关闭。&lt;/p&gt;
&lt;h4 id=&quot;解决：&quot;&gt;&lt;a href=&quot;#解决：&quot; class=&quot;headerlink&quot; title=&quot;解决：&quot;&gt;&lt;/a&gt;解决：&lt;/h4&gt;&lt;p&gt;为了保</summary>
      
    
    
    
    <category term="技术分享" scheme="https://www.kikohk.top/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="linux" scheme="https://www.kikohk.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>UnityHub安装unity时进度条卡住的解决方法</title>
    <link href="https://www.kikohk.top/article/7c97/"/>
    <id>https://www.kikohk.top/article/7c97/</id>
    <published>2020-08-15T08:44:17.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<p>在UnityHub上，出现进度条卡住：</p><p><img src="https://i.loli.net/2020/09/03/Px6NkIRnt5qaFsd.jpg"></p><p><strong><em>解决方法：</em></strong></p><p>右上角关闭，但是不要关闭后台，再重新打开即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在UnityHub上，出现进度条卡住：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/09/03/Px6NkIRnt5qaFsd.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;解决方法：&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;右上</summary>
      
    
    
    
    
    <category term="unity" scheme="https://www.kikohk.top/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>Unity学习笔记（一）</title>
    <link href="https://www.kikohk.top/article/6789/"/>
    <id>https://www.kikohk.top/article/6789/</id>
    <published>2020-08-15T08:41:08.000Z</published>
    <updated>2021-08-14T07:23:13.081Z</updated>
    
    <content type="html"><![CDATA[<p>今天是学习Unity的第三天，在b站上教程，做了个像模像样的“愤怒的小鸟”，今天开始整理一下，写一下笔记。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h5 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h5><pre><code>必要组件</code></pre><ul><li>position；世界坐标系位置</li></ul><h5 id="Rigidbody（刚体）"><a href="#Rigidbody（刚体）" class="headerlink" title="Rigidbody（刚体）"></a>Rigidbody（刚体）</h5><pre><code>结合unity的物理引擎，给游戏对象赋予物理属性，在物理引擎下运动，接受推力与扭力，从而实现现实世界中的运动效果。    </code></pre><ul><li>Mass: 质量 质量越大，引力越大，越飞不起来</li><li>Linear Drag：线性阻尼</li><li>Gravity Scale：重力大小</li></ul><h5 id="Spring-Joint（弹簧关节）"><a href="#Spring-Joint（弹簧关节）" class="headerlink" title="Spring Joint（弹簧关节）"></a>Spring Joint（弹簧关节）</h5><pre><code>将两个刚体连接在一起并使其如同弹簧一般运动的关节组件叫弹簧关节。</code></pre><ul><li>Distance：距离</li></ul><h5 id="Circle-Collider-2D（2D圆形碰撞体）"><a href="#Circle-Collider-2D（2D圆形碰撞体）" class="headerlink" title="Circle Collider 2D（2D圆形碰撞体）"></a>Circle Collider 2D（2D圆形碰撞体）</h5><pre><code>在2D图形中将两个对象设置成原型的可碰撞的物体。</code></pre><h5 id="Sprite-Renderer"><a href="#Sprite-Renderer" class="headerlink" title="Sprite Renderer"></a>Sprite Renderer</h5><pre><code>精灵渲染,物体形状</code></pre><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h5 id="Camera-main（主摄像机）"><a href="#Camera-main（主摄像机）" class="headerlink" title="Camera.main（主摄像机）"></a>Camera.main（主摄像机）</h5><h5 id="Vector3（向量）"><a href="#Vector3（向量）" class="headerlink" title="Vector3（向量）"></a>Vector3（向量）</h5><ul><li>Normalize()单位化向量</li></ul><h5 id="GetComponent（获取组件）"><a href="#GetComponent（获取组件）" class="headerlink" title="GetComponent（获取组件）"></a>GetComponent（获取组件）</h5><pre><code>变量 = GetComponent&lt;组件名&gt;();例如：rg = GetComponent&lt;Rigidbody2D&gt;();</code></pre><h5 id="Awake"><a href="#Awake" class="headerlink" title="Awake()"></a>Awake()</h5><pre><code>在脚本对象实例化时被调用的方法</code></pre><h5 id="鼠标动作"><a href="#鼠标动作" class="headerlink" title="鼠标动作"></a>鼠标动作</h5><pre><code>OnMouseDown()鼠标按下OnMouseUp()鼠标抬起</code></pre><h5 id="Camera-main-ScreenToWorldPoint"><a href="#Camera-main-ScreenToWorldPoint" class="headerlink" title="Camera.main.ScreenToWorldPoint"></a>Camera.main.ScreenToWorldPoint</h5><pre><code>将屏幕坐标转换为世界坐标。（将你屏幕鼠标的位置转换成游戏坐标）transform.position = Camera.main.ScreenToWorldPoint(Input.mousePosition);</code></pre><h5 id="Invoke-“方法”-时间"><a href="#Invoke-“方法”-时间" class="headerlink" title="Invoke(“方法”,时间)"></a>Invoke(“方法”,时间)</h5><pre><code>例如Invoke(&quot;SendMsg&quot;, 5);   它的意思是：5 秒之后调用 SendMsg() 方法；</code></pre><h5 id="Instantiate"><a href="#Instantiate" class="headerlink" title="Instantiate(,,)"></a>Instantiate(,,)</h5><pre><code>实例化对象，参数一：是预设 参数二：实例化预设的坐标  参数三：实例化预设的旋转角度例：Instantiate(boom, transform.position, Quaternion.identity);</code></pre><h5 id="Quaternion-identity"><a href="#Quaternion-identity" class="headerlink" title="Quaternion.identity"></a>Quaternion.identity</h5><pre><code>指Quaternion(0,0,0,0),就是每旋转前的初始角度,</code></pre><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天是学习Unity的第三天，在b站上教程，做了个像模像样的“愤怒的小鸟”，今天开始整理一下，写一下笔记。&lt;/p&gt;
&lt;h3 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h3&gt;&lt;h5 id=&quot;Tran</summary>
      
    
    
    
    
    <category term="unity" scheme="https://www.kikohk.top/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>V2Ray+Cloudflare搭建&quot;永不被墙&quot;的梯子（保姆级教程）</title>
    <link href="https://www.kikohk.top/article/6dc2/"/>
    <id>https://www.kikohk.top/article/6dc2/</id>
    <published>2020-08-06T03:38:00.000Z</published>
    <updated>2021-08-14T07:23:13.085Z</updated>
    
    <content type="html"><![CDATA[<p><font color=#ff000 size=5 face="微软雅黑">VPS活动改变，VPS只有24小时免费时间，梯子不再永久</font></p><hr><p>今天发现一个免费的永久VPS，香港的，就想着搭建一个自己的梯子。话不多说，直接淦！</p><h3 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买VPS</h3><p>首先，去<a href="https://www.hkisl.net/">hkisl</a>注册账号。</p><p><img src="http://cdn.kikohk.top/2020/08/06/08eddded3e7c6.jpg"><br>看不懂英文的可以点击上面，切换中文</p><p>这里注册不做演示。记得去验证邮箱。</p><p>登录后，来到首页。点击cloud下面的Virtual Sever</p><p><img src="http://cdn.kikohk.top/2020/08/06/0668994b758ab.jpg"><br>下拉选择Free的那一项</p><p><img src="http://cdn.kikohk.top/2020/08/06/3ec47edbe7a0b.jpg"><br>点击Order Now进行购买</p><p><img src="http://cdn.kikohk.top/2020/08/06/d779466e448ee.jpg"><br>左下角可以选择操作系统。推荐Centos 7.5,确认是0元就点contine。</p><p><img src="http://cdn.kikohk.top/2020/08/06/1ab43ceab21ed.jpg"><br>后面输入信息购买即可。</p><p>购买成功后，自己邮箱会受到一封邮件，里面是vps的ip和root密码。</p><p>来到自己的主页<br><img src="http://cdn.kikohk.top/2020/08/06/00a4b4a13e26c.jpg"></p><p>可以看到这里已经有一台vps了。接下来等待几小时，服务器就会部署成功。<br><img src="http://cdn.kikohk.top/2020/08/06/ffd121cdba310.jpg"></p><h3 id="注册域名"><a href="#注册域名" class="headerlink" title="注册域名"></a>注册域名</h3><p>等待的这几个小时里可以去<a href="https://freenom.com/">freenom.com</a>注册域名</p><p>这个网站可以免费注册5个域名，网站可能需要翻墙，可以用谷歌访问助手进去。方法这里就不教了。</p><p>我是用谷歌账号注册的，这里注册就不教了。</p><p>首页输入想要的域名。可以进行购买<br><img src="http://cdn.kikohk.top/2020/08/06/5074619a2a092.jpg"></p><p>免费的就是可以购买，不免费的估计已经被别人注册了。<br><img src="http://cdn.kikohk.top/2020/08/06/4d523fada87e7.jpg"></p><p>接下来购买就不做说明。</p><p>点击My Domains（我的域名），进入已购买域名列表<br><img src="http://cdn.kikohk.top/2020/08/06/08cf88f659679.jpg"></p><p>进入域名配置解析<br><img src="http://cdn.kikohk.top/2020/08/06/07bdd04ba78a5.jpg"><br><img src="http://cdn.kikohk.top/2020/08/06/6dccd600983b6.jpg"></p><p>type选择A，TTL可以先择600毫秒，Target写上刚刚购买的VPS的IP地址，保存即可。等待一会就可以解析成功。<br><img src="http://cdn.kikohk.top/2020/08/06/d3a8f38eae374.jpg"></p><p>使用cmd去ping一下域名，出现这些信息IP就说明解析成功了。<br><img src="http://cdn.kikohk.top/2020/08/06/086a3383b2af9.jpg"></p><p>接下来去配置cloudflare</p><h3 id="配置cloudflare"><a href="#配置cloudflare" class="headerlink" title="配置cloudflare"></a>配置cloudflare</h3><p>进入<a href="https://www.cloudflare.com/">cloudflare</a></p><p>登录注册这些就不教了。</p><p>具体实施步骤如下<br>1.1、在Cloudflare添加域名，并确保域名能在Cloudflare正常使用；<br>1.1.1、登陆到Cloudflare，进入域名管理页面，点击“Add a Site”按钮；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-3812-uploads.jpg"></p><p>1.1.2、填写主域名，点击“Add a Site”按钮；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-7795-uploads.jpg"></p><p>1.1.3、Cloudflare查询DNS，无视掉，点击“NEXT”；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-1229-uploads.jpg"></p><p>1.1.4、勾选 “FREE”，点击 “Confirm plan”；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-3688-uploads.jpg"></p><p>1.1.5、弹出“Confirm plan”窗口，点击“Confirm”；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-3275-uploads.jpg"></p><p>1.1.6、这个时候Cloudflare会提取之前的解析记录，如果不需要修改，直接无视；添加二级域名A记录解析到被封的IP，点击 “Add Record”；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-3425-uploads.jpg"></p><p>1.1.7、新增解析之后，是这样的；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-9108-uploads.jpg"></p><p>1.1.8、点击“Status”栏那朵小黄云，让小黄云变灰色，即（DNS only）；点击“Continue”；Cloudflare的操作暂时结束，不要关闭网页；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274912-8559-uploads.jpg"></p><p>2.2、域名DNS服务器修改；<br>2.2.1、新标签页打开已经注册的域名解析管理后台，<a href="https://freenom.com/">freenom.com</a><br><img src="http://cdn.kikohk.top/2020/08/06/c4572d48479eb.jpg"><br>在下面输入Cloudflare的DNS<br><img src="http://cdn.kikohk.top/2020/08/06/61ebdba1ed08b.jpg"></p><p>2.2.2、修改完毕之后，回到4.1.8步骤未关闭的Cloudflare网页，点击 “Continue”，进入到Cloudflare域名管理页面；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274911-9190-uploads.jpg"></p><p>2.2.3、当在Cloudflare域名管理页面看到如下图时，说明域名服务器更改还未生效，等待生效就行；一般几分钟就可以生效的；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274908-2974-uploads.jpg"></p><p>2.2.4、当在Cloudflare域名管理页面看到如下图时，说明域名服务器已经更换成功；<br><img src="https://img.wervps.gedoucheng.com/wervps/1560274911-9738-uploads.jpg"></p><h3 id="搭建V2ray"><a href="#搭建V2ray" class="headerlink" title="搭建V2ray"></a>搭建V2ray</h3><p>接下来就是去vps搭建V2ray了。</p><p>先去百度下载一个putty，输入vps的ip地址，点击打开，然后需要login，用户名是root，密码在邮箱。回车就可以进入终端。出现root@centos-7 ~就是连接成功了。</p><p>注：在cloudflare吧域名解析了ip地址后才可以进行。</p><p>接下来复制这行代码，粘贴上。可以右键点击在终端，就可以粘贴。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有几个选项注意下</p><p>1.传输协议 WebSocket + TLS，即4<br>2.端口，随意<br>3.你注册的域名</p><p>剩下的默认就行</p><p>成功提示后，记得保存上面的连接信息，在v2ray客户端中添加服务器即可。<br><img src="http://cdn.kikohk.top/2020/08/06/3c6e52511a391.png"></p><p>接下来就可以畅游外网了！！！！</p><p>速度1.5M/s，youtub没问题啦！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;font color=#ff000 size=5 face=&quot;微软雅黑&quot;&gt;VPS活动改变，VPS只有24小时免费时间，梯子不再永久&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天发现一个免费的永久VPS，香港的，就想着搭建一个自己的梯子。话不多说，直接淦！&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="梯子" scheme="https://www.kikohk.top/tags/%E6%A2%AF%E5%AD%90/"/>
    
  </entry>
  
</feed>
